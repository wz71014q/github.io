<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>βloS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/wz71014q/"/>
  <updated>2020-04-02T09:40:07.849Z</updated>
  <id>https://github.com/wz71014q/</id>
  
  <author>
    <name>Qiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue生命周期</title>
    <link href="https://github.com/wz71014q/2020/03/30/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://github.com/wz71014q/2020/03/30/Vue生命周期/</id>
    <published>2020-03-30T12:36:10.000Z</published>
    <updated>2020-04-02T09:40:07.849Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;框架为什么要有生命周期？因为框架就像是组装好的电脑，每个人的电脑里软件都不一样，买来了电脑，需要让用户可以有办法自己装一些软件。也就是实际业务不同，你要借助框架去做一些事，所以需要框架给一些接口让外部业务去调用，去填充数据。从new Vue()开始，这个框架的生命周期(作为一个构造函数函数)就已经开始了，但是我们平时使用的是它在一些特定的时刻的抛出的接口，这个才是定义的生命周期。</p><h1 id="Vue构造函数"><a href="#Vue构造函数" class="headerlink" title="Vue构造函数"></a>Vue构造函数</h1><p>&emsp;&emsp;这里学习的源码版本是2.6.11，构造函数的定义在src\core\instance\index.js。源码中Vue的构造函数很简单，首先检测是不是作为构造函数使用，然后执行初始化 this._init(options)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !(<span class="keyword">this</span> <span class="keyword">instanceof</span> Vue) ) &#123;</span><br><span class="line">    warn(<span class="string">'Vue is a constructor and should be called with the `new` keyword'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>._init(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">initMixin(Vue)</span><br><span class="line">stateMixin(Vue)</span><br><span class="line">eventsMixin(Vue)</span><br><span class="line">lifecycleMixin(Vue)</span><br><span class="line">renderMixin(Vue)</span><br></pre></td></tr></table></figure><h1 id="init"><a href="#init" class="headerlink" title="_init"></a>_init</h1><p>初始化方法是在上面的initMixin中定义的，位置是在src\core\instance\init.js中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line">  <span class="comment">// a uid</span></span><br><span class="line">  vm._uid = uid$<span class="number">2</span>++;</span><br><span class="line">  <span class="keyword">var</span> startTag, endTag;</span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="keyword">if</span> ( config.performance &amp;&amp; mark) &#123; <span class="comment">// 性能监控</span></span><br><span class="line">    startTag = <span class="string">"vue-perf-start:"</span> + (vm._uid);</span><br><span class="line">    endTag = <span class="string">"vue-perf-end:"</span> + (vm._uid);</span><br><span class="line">    mark(startTag);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// a flag to avoid this being observed</span></span><br><span class="line">  vm._isVue = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// merge options</span></span><br><span class="line">  <span class="keyword">if</span> (options &amp;&amp; options._isComponent) &#123; <span class="comment">// 优化内部组件实例</span></span><br><span class="line">    initInternalComponent(vm, options); <span class="comment">// 初始化内部组件</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    vm.$options = mergeOptions(</span><br><span class="line">      resolveConstructorOptions(vm.constructor),</span><br><span class="line">      options || &#123;&#125;,</span><br><span class="line">      vm</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">  &#123;</span><br><span class="line">    initProxy(vm);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// expose real self</span></span><br><span class="line">  vm._self = vm;</span><br><span class="line">  initLifecycle(vm);</span><br><span class="line">  initEvents(vm);</span><br><span class="line">  initRender(vm);</span><br><span class="line">  callHook(vm, <span class="string">'beforeCreate'</span>);</span><br><span class="line">  initInjections(vm); <span class="comment">// resolve injections before data/props</span></span><br><span class="line">  initState(vm);</span><br><span class="line">  initProvide(vm); <span class="comment">// resolve provide after data/props</span></span><br><span class="line">  callHook(vm, <span class="string">'created'</span>);</span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="keyword">if</span> ( config.performance &amp;&amp; mark) &#123; <span class="comment">// 性能监控</span></span><br><span class="line">    vm._name = formatComponentName(vm, <span class="literal">false</span>);</span><br><span class="line">    mark(endTag);</span><br><span class="line">    measure((<span class="string">"vue "</span> + (vm._name) + <span class="string">" init"</span>), startTag, endTag);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (vm.$options.el) &#123; <span class="comment">// 开始挂载</span></span><br><span class="line">    vm.$mount(vm.$options.el);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的作用是定义vm、uid，合并所有配置，执行生命周期系统、事件系统、渲染系统、数据系统的初始化，最后检测传入的挂载节点无误后执行挂载。其中mergeOptions的作用是合并当前构造函数(新建的Vue的实例)的options和其父级构造函数(Vue)的options属性，Vue自身的配置里包含了自带的组件，指令等，如<transition>。其中会执行对props、Inject、全局指令进行标准化的方法：normalizeProps(child, vm);normalizeInject(child, vm)，normalizeDirectives(child)，props里的类型检测就是在这进行的，另外会合并minxins里的options，具体实现暂且不谈。我们一个一个来看：</transition></p><h2 id="initProxy"><a href="#initProxy" class="headerlink" title="initProxy"></a>initProxy</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hasProxy = <span class="keyword">typeof</span> <span class="built_in">Proxy</span> !== <span class="string">'undefined'</span> &amp;&amp; isNative(<span class="built_in">Proxy</span>); <span class="comment">// isNative检测是否JS原生方法</span></span><br><span class="line">initProxy = <span class="function"><span class="keyword">function</span> <span class="title">initProxy</span> (<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (hasProxy) &#123;</span><br><span class="line">    <span class="comment">// determine which proxy handler to use</span></span><br><span class="line">    <span class="keyword">var</span> options = vm.$options;</span><br><span class="line">    <span class="keyword">var</span> handlers = options.render &amp;&amp; options.render._withStripped</span><br><span class="line">      ? getHandler</span><br><span class="line">      : hasHandler;</span><br><span class="line">    vm._renderProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(vm, handlers);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    vm._renderProxy = vm;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>initProxy位置在src\core\instance\proxy.js，作用是新建一层代理，对传入的数据进行一次过滤，比如，不能在模板和data中使用以$、_开头的变量，因为这些是Vue的内部持有变量。处理逻辑在getHandler和hasHandler方法中。</p><h2 id="initlifecycle"><a href="#initlifecycle" class="headerlink" title="initlifecycle"></a>initlifecycle</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initLifecycle</span> (<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> options = vm.$options;</span><br><span class="line">  <span class="comment">// locate first non-abstract parent</span></span><br><span class="line">  <span class="keyword">var</span> parent = options.parent; <span class="comment">// 找到第一个父级</span></span><br><span class="line">  <span class="keyword">if</span> (parent &amp;&amp; !options.abstract) &#123;</span><br><span class="line">    <span class="keyword">while</span> (parent.$options.abstract &amp;&amp; parent.$parent) &#123;</span><br><span class="line">      parent = parent.$parent;</span><br><span class="line">    &#125;</span><br><span class="line">    parent.$children.push(vm);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 根元素</span></span><br><span class="line">  vm.$parent = parent;</span><br><span class="line">  vm.$root = parent ? parent.$root : vm;</span><br><span class="line">  <span class="comment">// 变量初始化</span></span><br><span class="line">  vm.$children = [];</span><br><span class="line">  vm.$refs = &#123;&#125;;</span><br><span class="line">  vm._watcher = <span class="literal">null</span>;</span><br><span class="line">  vm._inactive = <span class="literal">null</span>;</span><br><span class="line">  vm._directInactive = <span class="literal">false</span>;</span><br><span class="line">  vm._isMounted = <span class="literal">false</span>;</span><br><span class="line">  vm._isDestroyed = <span class="literal">false</span>;</span><br><span class="line">  vm._isBeingDestroyed = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法在src\core\instance\lifecycle.js，主要是找到$root，并且初始化$parent、$refs、$children等属性</p><h2 id="initEvents"><a href="#initEvents" class="headerlink" title="initEvents"></a>initEvents</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initEvents</span> (<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  vm._events = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">  vm._hasHookEvent = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// init parent attached events</span></span><br><span class="line">  <span class="keyword">var</span> listeners = vm.$options._parentListeners;</span><br><span class="line">  <span class="keyword">if</span> (listeners) &#123;</span><br><span class="line">    updateComponentListeners(vm, listeners);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>位置是src\core\instance\events.js，initEvents作用是初始化Vue的事件系统的，在Vue实例上新增一个_events属性，并存储初始化的事件。updateComponentListeners的主要作用就是将父组件向子组件添加的事件注册到子组件实例中的_events对象里。</p><h2 id="initRender"><a href="#initRender" class="headerlink" title="initRender"></a>initRender</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initRender</span> (<span class="params">vm</span>) </span>&#123;</span><br><span class="line">    vm._vnode = <span class="literal">null</span>;</span><br><span class="line">    vm._staticTrees = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> options = vm.$options;</span><br><span class="line">    <span class="keyword">var</span> parentVnode = vm.$vnode = options._parentVnode;</span><br><span class="line">    <span class="keyword">var</span> renderContext = parentVnode &amp;&amp; parentVnode.context;</span><br><span class="line">    vm.$slots = resolveSlots(options._renderChildren, renderContext); <span class="comment">// 解析slots</span></span><br><span class="line">    vm.$scopedSlots = emptyObject;</span><br><span class="line">    vm._c = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c, d</span>) </span>&#123; <span class="keyword">return</span> createElement(vm, a, b, c, d, <span class="literal">false</span>); &#125;;</span><br><span class="line">    vm.$createElement = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c, d</span>) </span>&#123; <span class="keyword">return</span> createElement(vm, a, b, c, d, <span class="literal">true</span>); &#125;; <span class="comment">// $createElement是手写render方法时调用的，包含对输入数据的过滤</span></span><br><span class="line">    <span class="keyword">var</span> parentData = parentVnode &amp;&amp; parentVnode.data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">    &#123;</span><br><span class="line">      defineReactive(vm, <span class="string">'$attrs'</span>, parentData &amp;&amp; parentData.attrs || emptyObject, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        !isUpdatingChildComponent &amp;&amp; warn(<span class="string">"$attrs is readonly."</span>, vm);</span><br><span class="line">      &#125;, <span class="literal">true</span>);</span><br><span class="line">      defineReactive(vm, <span class="string">'$listeners'</span>, options._parentListeners || emptyObject, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        !isUpdatingChildComponent &amp;&amp; warn(<span class="string">"$listeners is readonly."</span>, vm);</span><br><span class="line">      &#125;, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>initRender在src\core\instance\render.js。initRender方法主要是初始化渲染属性，定义渲染方法。并且初始化插槽、$attrs、$listeners，其中的defineReactive就是定义响应式系统的一部分内容。initRender之后会触发beforeCreate方法，这时methods、data等还没有初始化，所以没法调用其中的属性。</p><h2 id="initInjections和initProvide"><a href="#initInjections和initProvide" class="headerlink" title="initInjections和initProvide"></a>initInjections和initProvide</h2><p>初始化inject/provide</p><h2 id="initState"><a href="#initState" class="headerlink" title="initState"></a>initState</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initState</span> (<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  vm._watchers = [];</span><br><span class="line">  <span class="keyword">var</span> opts = vm.$options;</span><br><span class="line">  <span class="keyword">if</span> (opts.props) &#123; initProps(vm, opts.props); &#125;</span><br><span class="line">  <span class="keyword">if</span> (opts.methods) &#123; initMethods(vm, opts.methods); &#125;</span><br><span class="line">  <span class="keyword">if</span> (opts.data) &#123;</span><br><span class="line">    initData(vm);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    observe(vm._data = &#123;&#125;, <span class="literal">true</span> <span class="comment">/* asRootData */</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (opts.computed) &#123; initComputed(vm, opts.computed); &#125;</span><br><span class="line">  <span class="keyword">if</span> (opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;</span><br><span class="line">    initWatch(vm, opts.watch);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>initState的位置在src\core\instance\state.js，作用是初始化props、data、methods、watch、computed等属性。</p><ol><li>initProps主要是将props设置成响应式数据；</li><li>initMethods主要是对命名进行检查——不能与props或data中的变量重名，然后将方法挂载到vm实例上。</li><li>initData也会进行重名检查，并调用observe方法将数据对象标记为响应式对象。</li><li>initComputed对computed属性进行检查，新建一个watchers空对象，再遍历传入的options.computed，每个属性新建一个Watcher实例，表示增加了一个需要被监听的数据依赖。</li><li>initWatch是初始化watch系统，初始化data、computed、watch最终都会调用Object.defineProperty进行数据拦截，它们都是响应式系统的一部分</li><li>initState之后触发created，这个时候数据已经加载完毕，但是还没有挂载，适合做一些与异步请求的业务</li></ol><h2 id="调用生命周期方法的方法callHook"><a href="#调用生命周期方法的方法callHook" class="headerlink" title="调用生命周期方法的方法callHook"></a>调用生命周期方法的方法callHook</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callHook</span> (<span class="params">vm, hook</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// #7573 disable dep collection when invoking lifecycle hooks</span></span><br><span class="line">  pushTarget();</span><br><span class="line">  <span class="keyword">var</span> handlers = vm.$options[hook];</span><br><span class="line">  <span class="keyword">var</span> info = hook + <span class="string">" hook"</span>;</span><br><span class="line">  <span class="keyword">if</span> (handlers) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = handlers.length; i &lt; j; i++) &#123;</span><br><span class="line">      invokeWithErrorHandling(handlers[i], vm, <span class="literal">null</span>, vm, info);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (vm._hasHookEvent) &#123;</span><br><span class="line">    vm.$emit(<span class="string">'hook:'</span> + hook);</span><br><span class="line">  &#125;</span><br><span class="line">  popTarget();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>callHook在src\core\instance\lifecycle.js中，生命周期内的方法是由callHook调用的，也就是遍历生命周期方法的数组(合并mixins的属性时会创建数组)，顺序执行其中的钩子函数，其中的invokeWithErrorHandling会捕捉执行过程的错误</p><h2 id="挂载-mount"><a href="#挂载-mount" class="headerlink" title="挂载$mount"></a>挂载$mount</h2><p>src\platforms\weex\runtime\index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params">el, hydrating</span>) </span>&#123;</span><br><span class="line">  el = el &amp;&amp; inBrowser ? query(el) : <span class="literal">undefined</span>; <span class="comment">// 获取挂载节点</span></span><br><span class="line">  <span class="keyword">return</span> mountComponent(<span class="keyword">this</span>, el, hydrating)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mount = Vue.prototype.$mount;</span><br><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params">el, hydrating</span>) </span>&#123;</span><br><span class="line">  el = el &amp;&amp; query(el);</span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="keyword">if</span> (el === <span class="built_in">document</span>.body || el === <span class="built_in">document</span>.documentElement) &#123; <span class="comment">// 不能挂载到html/body</span></span><br><span class="line">     warn(<span class="string">"Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> options = <span class="keyword">this</span>.$options;</span><br><span class="line">  <span class="comment">// resolve template/el and convert to render function</span></span><br><span class="line">  <span class="keyword">if</span> (!options.render) &#123; <span class="comment">// render是已经编译好的渲染方法，如果没有渲染方法，则需要获取用户传入的模板内容将模板字符串转化为渲染方法</span></span><br><span class="line">    <span class="keyword">var</span> template = options.template;</span><br><span class="line">    <span class="keyword">if</span> (template) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> template === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (template.charAt(<span class="number">0</span>) === <span class="string">'#'</span>) &#123;</span><br><span class="line">          template = idToTemplate(template);</span><br><span class="line">          <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">          <span class="keyword">if</span> ( !template) &#123;</span><br><span class="line">            warn((<span class="string">"Template element not found or is empty: "</span> + (options.template)), <span class="keyword">this</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (template.nodeType) &#123;</span><br><span class="line">        template = template.innerHTML;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        &#123;</span><br><span class="line">          warn(<span class="string">'invalid template option:'</span> + template, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el) &#123;</span><br><span class="line">      template = getOuterHTML(el);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (template) &#123;</span><br><span class="line">      <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">      <span class="keyword">if</span> ( config.performance &amp;&amp; mark) &#123;</span><br><span class="line">        mark(<span class="string">'compile'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> ref = compileToFunctions(template, &#123;</span><br><span class="line">        outputSourceRange: <span class="string">"development"</span> !== <span class="string">'production'</span>,</span><br><span class="line">        shouldDecodeNewlines: shouldDecodeNewlines,</span><br><span class="line">        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,</span><br><span class="line">        delimiters: options.delimiters,</span><br><span class="line">        comments: options.comments</span><br><span class="line">      &#125;, <span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">var</span> render = ref.render;</span><br><span class="line">      <span class="keyword">var</span> staticRenderFns = ref.staticRenderFns;</span><br><span class="line">      options.render = render;</span><br><span class="line">      options.staticRenderFns = staticRenderFns;</span><br><span class="line">      <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">      <span class="keyword">if</span> ( config.performance &amp;&amp; mark) &#123; <span class="comment">// 性能监控</span></span><br><span class="line">        mark(<span class="string">'compile end'</span>);</span><br><span class="line">        measure((<span class="string">"vue "</span> + (<span class="keyword">this</span>._name) + <span class="string">" compile"</span>), <span class="string">'compile'</span>, <span class="string">'compile end'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mount.call(<span class="keyword">this</span>, el, hydrating)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>compileToFunctions的作用是将模板编译成渲染函数，该函数接收待编译的模板字符串和编译选项作为参数，返回一个对象，对象里面的render属性即是编译好的渲染函数，最后将渲染函数设置到$options上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src\core\instance\lifecycle.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mountComponent</span> (<span class="params">vm, el, hydrating</span>) </span>&#123;</span><br><span class="line">  vm.$el = el;</span><br><span class="line">  <span class="keyword">if</span> (!vm.$options.render) &#123;</span><br><span class="line">    vm.$options.render = createEmptyVNode; <span class="comment">// 创建默认的渲染函数</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* istanbul ignore if */</span> <span class="comment">// 检查挂载节点是否存在并输出开发环境警告信息</span></span><br><span class="line">      <span class="keyword">if</span> ((vm.$options.template &amp;&amp; vm.$options.template.charAt(<span class="number">0</span>) !== <span class="string">'#'</span>) ||</span><br><span class="line">        vm.$options.el || el) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">'You are using the runtime-only build of Vue where the template '</span> +</span><br><span class="line">          <span class="string">'compiler is not available. Either pre-compile the templates into '</span> +</span><br><span class="line">          <span class="string">'render functions, or use the compiler-included build.'</span>,</span><br><span class="line">          vm</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">'Failed to mount component: template or render function not defined.'</span>,</span><br><span class="line">          vm</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  callHook(vm, <span class="string">'beforeMount'</span>);</span><br><span class="line">  <span class="keyword">var</span> updateComponent;</span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="keyword">if</span> ( config.performance &amp;&amp; mark) &#123;</span><br><span class="line">    updateComponent = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> name = vm._name;</span><br><span class="line">      <span class="keyword">var</span> id = vm._uid;</span><br><span class="line">      <span class="keyword">var</span> startTag = <span class="string">"vue-perf-start:"</span> + id;</span><br><span class="line">      <span class="keyword">var</span> endTag = <span class="string">"vue-perf-end:"</span> + id;</span><br><span class="line">      mark(startTag);</span><br><span class="line">      <span class="keyword">var</span> vnode = vm._render();</span><br><span class="line">      mark(endTag);</span><br><span class="line">      measure((<span class="string">"vue "</span> + name + <span class="string">" render"</span>), startTag, endTag);</span><br><span class="line">      mark(startTag);</span><br><span class="line">      vm._update(vnode, hydrating);</span><br><span class="line">      mark(endTag);</span><br><span class="line">      measure((<span class="string">"vue "</span> + name + <span class="string">" patch"</span>), startTag, endTag);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    updateComponent = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      vm._update(vm._render(), hydrating); <span class="comment">// _render是对VNODE的一些处理</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">new</span> Watcher(vm, updateComponent, noop, &#123;</span><br><span class="line">    before: <span class="function"><span class="keyword">function</span> <span class="title">before</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (vm._isMounted &amp;&amp; !vm._isDestroyed) &#123;</span><br><span class="line">        callHook(vm, <span class="string">'beforeUpdate'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="literal">true</span> <span class="comment">/* isRenderWatcher */</span>);</span><br><span class="line">  hydrating = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (vm.$vnode == <span class="literal">null</span>) &#123;</span><br><span class="line">    vm._isMounted = <span class="literal">true</span>;</span><br><span class="line">    callHook(vm, <span class="string">'mounted'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> vm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src\core\observer\scheduler.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callUpdatedHooks</span> (<span class="params">queue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = queue.length;</span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    <span class="keyword">var</span> watcher = queue[i];</span><br><span class="line">    <span class="keyword">var</span> vm = watcher.vm;</span><br><span class="line">    <span class="keyword">if</span> (vm._watcher === watcher &amp;&amp; vm._isMounted &amp;&amp; !vm._isDestroyed) &#123;</span><br><span class="line">      callHook(vm, <span class="string">'updated'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beforeMount是在渲染函数完成之后触发。之后调用vm._render()方法将render函数转化为Virtual DOM，并最终通过vm._update()方法将Virtual DOM渲染为真实的DOM节点。同时，还会创建一个Watcher实例，并将定义好的updateComponent函数传入，开启对模板中数据（状态）的监控，之后就正式挂载到DOM上，并触发mounted。beforeUpdate和updated分别在数据变化之前和更新之后触发</p><h1 id="销毁过程"><a href="#销毁过程" class="headerlink" title="销毁过程"></a>销毁过程</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$destroy = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">if</span> (vm._isBeingDestroyed) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  callHook(vm, <span class="string">'beforeDestroy'</span>);</span><br><span class="line">  vm._isBeingDestroyed = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// remove self from parent</span></span><br><span class="line">  <span class="keyword">var</span> parent = vm.$parent;</span><br><span class="line">  <span class="keyword">if</span> (parent &amp;&amp; !parent._isBeingDestroyed &amp;&amp; !vm.$options.abstract) &#123;</span><br><span class="line">    remove(parent.$children, vm);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// teardown watchers</span></span><br><span class="line">  <span class="keyword">if</span> (vm._watcher) &#123;</span><br><span class="line">    vm._watcher.teardown();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> i = vm._watchers.length;</span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    vm._watchers[i].teardown();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// remove reference from data ob</span></span><br><span class="line">  <span class="comment">// frozen object may not have observer.</span></span><br><span class="line">  <span class="keyword">if</span> (vm._data.__ob__) &#123;</span><br><span class="line">    vm._data.__ob__.vmCount--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// call the last hook...</span></span><br><span class="line">  vm._isDestroyed = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// invoke destroy hooks on current rendered tree</span></span><br><span class="line">  vm.__patch__(vm._vnode, <span class="literal">null</span>);</span><br><span class="line">  <span class="comment">// fire destroyed hook</span></span><br><span class="line">  callHook(vm, <span class="string">'destroyed'</span>);</span><br><span class="line">  <span class="comment">// turn off all instance listeners.</span></span><br><span class="line">  vm.$off();</span><br><span class="line">  <span class="comment">// remove __vue__ reference</span></span><br><span class="line">  <span class="keyword">if</span> (vm.$el) &#123;</span><br><span class="line">    vm.$el.__vue__ = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// release circular reference (#6759)</span></span><br><span class="line">  <span class="keyword">if</span> (vm.$vnode) &#123;</span><br><span class="line">    vm.$vnode.parent = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>组件销毁时会调用原型上的$destroy方法，首先会检测是否有销毁过程正在进行，如果没有即触发beforeDestroy。如果组件需要卸载一些监听事件可以在这个生命周期进行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeDestroy () &#123;</span><br><span class="line">  <span class="keyword">this</span>.$root.$off(<span class="keyword">this</span>.$route.name + <span class="string">'Back'</span>)</span><br><span class="line">  <span class="keyword">this</span>.$root.$off(<span class="keyword">this</span>.$route.name + <span class="string">'Next'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着正式开始注销：首先从父组件移除自身，接着执行vm._watcher.teardown() 将实例自身从其他数据的依赖列表中删除，teardown方法的作用是从所有依赖向的Dep列表中将自己删除。然后移除实例内数据对其他数据的依赖。接下来移除实例内响应式数据的引用、给当前实例上添加_isDestroyed属性来表示当前实例已经被销毁，同时将实例的VNode树设置为null，触发destroyed并移除所有事件监听器，销毁完毕。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;框架为什么要有生命周期？因为框架就像是组装好的电脑，每个人的电脑里软件都不一样，买来了电脑，需要让用户可以有办法自己装一些软件。也就是实际业务不同，你要借助框架去做一些事，所以需要框架给一些接口让外部业务去调用，去填充数据。从new Vue()开始，
      
    
    </summary>
    
      <category term="JS" scheme="https://github.com/wz71014q/categories/JS/"/>
    
      <category term="HTML" scheme="https://github.com/wz71014q/categories/HTML/"/>
    
      <category term="Vue" scheme="https://github.com/wz71014q/categories/Vue/"/>
    
    
      <category term="HTML" scheme="https://github.com/wz71014q/tags/HTML/"/>
    
      <category term="JS" scheme="https://github.com/wz71014q/tags/JS/"/>
    
      <category term="Vue" scheme="https://github.com/wz71014q/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue双向绑定</title>
    <link href="https://github.com/wz71014q/2019/08/10/Vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
    <id>https://github.com/wz71014q/2019/08/10/Vue双向绑定/</id>
    <published>2019-08-10T11:00:00.000Z</published>
    <updated>2019-09-26T03:31:07.510Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;双向绑定一直是一个高频考点，今天就来实现一个简单的Vue双向绑定。设框架名称为Wue，双向绑定指令为w-model。主要方法是observer、watcher、complier。分别用来给属性绑定setter，连接observer与complier，根据模版语法添加对应的watcher并且更新模版中的值</p><h2 id="observer思路"><a href="#observer思路" class="headerlink" title="observer思路"></a>observer思路</h2><div id="flowchart-0" class="flow-chart"></div><p>watcher(在本文中更像是writer)相当于中间人。手动设置data属性后，setter触发对应data属性的watcher，watcher更新UI；input等加了双向绑定指令”w-model”的值更新后，触发对应绑定事件，在回调方法中触发watcher，更新data属性<br><a id="more"></a></p><h2 id="watcher思路"><a href="#watcher思路" class="headerlink" title="watcher思路"></a>watcher思路</h2><div id="flowchart-1" class="flow-chart"></div><p>watcher是在分析dom元素时添加的。先遍历dom节点，找到添加了w-model或使用指定的插值语法输入的属性，给它们添加watcher。这部分的实现者是complier</p><h2 id="complier思路"><a href="#complier思路" class="headerlink" title="complier思路"></a>complier思路</h2><div id="flowchart-2" class="flow-chart"></div><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>手写 vue 双向绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">    w-model-name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">w-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    w-model-age: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">w-model</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    no w-model: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"submit"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"setData"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.html'</span>;</span><br><span class="line"><span class="keyword">import</span> observer <span class="keyword">from</span> <span class="string">'./observer'</span>;</span><br><span class="line"><span class="keyword">import</span> getElement <span class="keyword">from</span> <span class="string">'./complier'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Wue</span>(<span class="params">options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.$el = <span class="built_in">document</span>.querySelector(options.el);</span><br><span class="line">  <span class="keyword">this</span>.$data = options.data;</span><br><span class="line">  <span class="keyword">this</span>._watchers = &#123;&#125;; <span class="comment">// 监听池，存放data和w-model绑定的中每个数据的watcher</span></span><br><span class="line">  <span class="keyword">this</span>._observer(<span class="keyword">this</span>.$data);</span><br><span class="line">  <span class="keyword">this</span>._complier(<span class="keyword">this</span>.$el);</span><br><span class="line">&#125;</span><br><span class="line">Wue.prototype._observer = observer;</span><br><span class="line">Wue.prototype._complier = getElement;</span><br><span class="line"><span class="comment">// 创建新的Wue实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Wue(&#123;</span><br><span class="line">  el: <span class="string">'#root'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: <span class="string">'Alice'</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">window</span>.app = app;</span><br><span class="line"><span class="comment">// 手动修改Data数据，触发UI更新</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.submit'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  app.$data.name = <span class="string">'Tom'</span>;</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// complier.js</span></span><br><span class="line"><span class="comment">// 从根节点开始，遍历所有节点，获取所有带v-model和&#123;&#123;&#125;&#125;中的属性(已在data定义或w-model这种默认指令)，为它们添加watcher。并且input更新后手动修改data</span></span><br><span class="line"><span class="keyword">import</span> Watcher <span class="keyword">from</span> <span class="string">'./watcher'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElement</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">const</span> nodeList = element.children; <span class="comment">// 获取每一级的根节点: HTMLCollection</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nodeList.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">    complier.call(_this, nodeList[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complier</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">if</span> (element.children.length) &#123;</span><br><span class="line">    complier(element); <span class="comment">// 递归深度遍历dom树</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (element.hasAttribute(<span class="string">'w-model'</span>) &amp;&amp; element.tagName === <span class="string">'INPUT'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> attr = element.getAttribute(<span class="string">'w-model'</span>);</span><br><span class="line">    _this._watchers[attr].push(</span><br><span class="line">      <span class="keyword">new</span> Watcher(&#123;</span><br><span class="line">        el: element,</span><br><span class="line">        val: attr,</span><br><span class="line">        vm: _this,</span><br><span class="line">        attr: <span class="string">'value'</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">    );</span><br><span class="line">    element.addEventListener(</span><br><span class="line">      <span class="string">'input'</span>,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        _this.$data[attr] = element.value;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="literal">false</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历节点，获取&#123;&#123;&#125;&#125;中的值，在Wue.data中查找对应的属性，添加watcher</span></span><br><span class="line">  <span class="keyword">const</span> tagReg = <span class="regexp">/^\&#123;\&#123;\s*(.*\S)\s*\&#125;\&#125;$/</span>;</span><br><span class="line">  <span class="keyword">let</span> textNode = element.textContent; <span class="comment">// 当前节点的文本内容</span></span><br><span class="line">  <span class="keyword">if</span> (tagReg.test(textNode)) &#123;</span><br><span class="line">    textNode = textNode.replace(tagReg, (matched, matchedVal) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> watcher = _this._watchers[matchedVal];</span><br><span class="line">      <span class="keyword">if</span> (!watcher) &#123;</span><br><span class="line">        <span class="comment">// 没有事件池 创建事件池</span></span><br><span class="line">        watcher = [];</span><br><span class="line">      &#125;</span><br><span class="line">      watcher.push(</span><br><span class="line">        <span class="keyword">new</span> Watcher(&#123;</span><br><span class="line">          el: element,</span><br><span class="line">          vm: _this,</span><br><span class="line">          val: matchedVal,</span><br><span class="line">          attr: <span class="string">'innerHTML'</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getElement;</span><br></pre></td></tr></table></figure><p>observer.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为data中的每个属性添加getter、setter。数据变化后触发watcher</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observer</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">if</span> (!obj || <span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    initWatcher.call(_this, key);</span><br><span class="line">    defineObjProperty.call(_this, obj, key, obj[key]);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化数据订阅池</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initWatcher</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._watchers[key] = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置对象成员的访问器属性，监听数据变化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineObjProperty</span>(<span class="params">obj, key, value</span>) </span>&#123;</span><br><span class="line">  observer(value);</span><br><span class="line">  <span class="keyword">const</span> watchersPool = <span class="keyword">this</span>._watchers;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>(newVal) &#123;</span><br><span class="line">      <span class="keyword">if</span> (newVal !== value) &#123;</span><br><span class="line">        value = newVal;</span><br><span class="line">        <span class="built_in">Object</span>.keys(watchersPool).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">          watchersPool[key].forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.update();</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> observer;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// watcher.js</span></span><br><span class="line"><span class="comment">// Watcher，个人觉得更应该叫Writer。用来将complier与observer连接起来。当input数据发生变化时，触发input事件，再触发watcher，修改data中的数据</span></span><br><span class="line"><span class="comment">// 反过来，data数据变化，触发setter，进而触发watcher，修改input的数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">&#123;el, vm, val, attr&#125; = options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.el = el;</span><br><span class="line">  <span class="keyword">this</span>.vm = vm;</span><br><span class="line">  <span class="keyword">this</span>.val = val;</span><br><span class="line">  <span class="keyword">this</span>.attr = attr; <span class="comment">// dom获取值，如value获取input的值 / innerHTML获取dom的值</span></span><br><span class="line">  <span class="keyword">this</span>.update();</span><br><span class="line">&#125;</span><br><span class="line">Watcher.prototype.update = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 更新input值</span></span><br><span class="line">  <span class="keyword">this</span>.el[<span class="keyword">this</span>.attr] = <span class="keyword">this</span>.vm.$data[<span class="keyword">this</span>.val];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Watcher;</span><br></pre></td></tr></table></figure><p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">start=>start: 开始end=>end: 结束op1=>operation: 遍历Wue.data中的所有属性，为每个属性添加getter/setterop2=>operation: 手动设置data中的属性值，触发setterop3=>operation: setter触发watcherstart->op1->op2->op3->end</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">start=>start: 开始end=>end: 结束op1=>operation: 触发watcher，更新input的valueop2=>operation: 触发watcher，更新data的属性condition=>condition: data属性更新dataIo=>inputoutput: data属性更新inputIo=>inputoutput: input属性更新start->conditioncondition(yes)->dataIo->op1->endcondition(no)->inputIo->op2->end</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script><textarea id="flowchart-2-code" style="display: none">start=>start: 开始end=>end: 结束op1=>operation: 遍历dom节点op2=>operation: input标签添加input事件，更新数据后更改data中的属性op3=>operation: 给双大括号语法中的属性添加watcher，将其值替换为data属性中的值condition=>condition: 是否有w-model或双大括号语法start->op1->conditioncondition(yes)->op2->op3->endcondition(no)->end</textarea><textarea id="flowchart-2-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-2-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-2-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-2", options);</script></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;双向绑定一直是一个高频考点，今天就来实现一个简单的Vue双向绑定。设框架名称为Wue，双向绑定指令为w-model。主要方法是observer、watcher、complier。分别用来给属性绑定setter，连接observer与complier，根据模版语法添加对应的watcher并且更新模版中的值&lt;/p&gt;
&lt;h2 id=&quot;observer思路&quot;&gt;&lt;a href=&quot;#observer思路&quot; class=&quot;headerlink&quot; title=&quot;observer思路&quot;&gt;&lt;/a&gt;observer思路&lt;/h2&gt;&lt;div id=&quot;flowchart-0&quot; class=&quot;flow-chart&quot;&gt;&lt;/div&gt;

&lt;p&gt;watcher(在本文中更像是writer)相当于中间人。手动设置data属性后，setter触发对应data属性的watcher，watcher更新UI；input等加了双向绑定指令”w-model”的值更新后，触发对应绑定事件，在回调方法中触发watcher，更新data属性&lt;br&gt;
    
    </summary>
    
      <category term="JS" scheme="https://github.com/wz71014q/categories/JS/"/>
    
      <category term="Vue" scheme="https://github.com/wz71014q/categories/Vue/"/>
    
    
      <category term="JS" scheme="https://github.com/wz71014q/tags/JS/"/>
    
      <category term="Vue" scheme="https://github.com/wz71014q/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>面试题-从输入url到页面展示发生了什么</title>
    <link href="https://github.com/wz71014q/2019/08/06/%E9%9D%A2%E8%AF%95%E9%A2%98-%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
    <id>https://github.com/wz71014q/2019/08/06/面试题-从输入url到页面展示发生了什么/</id>
    <published>2019-08-06T11:08:00.000Z</published>
    <updated>2019-09-26T03:31:07.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解析过程"><a href="#解析过程" class="headerlink" title="解析过程"></a>解析过程</h2><p>1、DNS解析<br>2、TCP连接<br>3、发起http请求<br>4、服务器处理http请求<br>5、服务器响应http请求<br>6、浏览器渲染页面<br>7、连接结束</p><h3 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h3><p>&emsp;&emsp;输入网址，浏览器并不知道要去哪里找资源，需要DNS递归查询对应IP</p><ol><li>DNS递归查询首先是在本地服务器进行查询，本地服务器找不到后再向根域名服务器查询，根域名服务器找不到再向上一级顶级com域名服务器查找。直到最终找到并返回IP，然后本地域名服务器会将该ip缓存起来，供下次使用。比如输入<a href="http://www.google.com，那么查询过程为.-&gt;.com-&gt;google.com-&gt;www.google.com" target="_blank" rel="noopener">www.google.com，那么查询过程为.-&gt;.com-&gt;google.com-&gt;www.google.com</a></li><li>此处优化方法：<br>DNS缓存：浏览器、系统（host文件）、路由器、ISP DNS缓存（互联网提供商）、本地域名服务器等都有缓存<br>DNS负载均衡：根据地理位置、服务器负载量等来选择最合适的一个服务器来进行查询</li></ol><h3 id="TCP连接：三次握手，四次挥手"><a href="#TCP连接：三次握手，四次挥手" class="headerlink" title="TCP连接：三次握手，四次挥手"></a>TCP连接：三次握手，四次挥手</h3><h4 id="TCP报文结构："><a href="#TCP报文结构：" class="headerlink" title="TCP报文结构："></a>TCP报文结构：</h4><a id="more"></a><p><img src="https://raw.githubusercontent.com/wz71014q/img/master/TCP/structure.jpg" alt="TCP-structure"></p><p>TCP报文结构中有固定的20字节的首部，里面有源端口、目的端口。序号、确认号、校验和、数据偏移等</p><ul><li>seq（序号）: TCP连接的数据字节流中的每一个字节都有一个序号，seq表示的是本报文发送的第一个字节的序号。</li><li>ack(确认号)：表示期望收到的下一个报文段第一个字节的编号</li><li>标志位SYN（同步标识）：本bit位为1时表示发送的是一个连接请求或者连接接受的报文</li><li>标志位ACK（确认标识）：本bit位为1 表示确认号有效，表示确实收到seq为x的包，下次会回复ack = x + 1的值</li><li>标志位FIN（完成标识）：本bit位为1时，释放一个连接。表示发送端的数据已全部发送，要求释放传输通道。</li><li>标志位RST（复位标识）：为1时表示本次TCP连接出现严重错误，需要重新连接</li><li>标志位PSH（推送标识）：推送位。</li><li>标志位URG（紧急标识）：紧急bit位，表示紧急指针有效,这意味着不必等待前段数据被响应处理完即可发送给接收端</li></ul><h4 id="三次握手过程"><a href="#三次握手过程" class="headerlink" title="三次握手过程"></a>三次握手过程</h4><p>从网上盗的图：</p><p><img src="https://raw.githubusercontent.com/wz71014q/img/master/TCP/connect.jpg" alt="TCP-connect"></p><ol><li>白话讲解</li></ol><ul><li>第一次握手：客户端：喂，听得到吗？</li><li>第二次握手：服务器：听得到，你听得到我吗？</li><li>第三次握手：客户端：听得到，咱们开始传输吧。</li></ul><ol start="2"><li>专业讲解：</li></ol><ul><li>第一次握手：客户端主动发起请求，第一个报文首部标志位为：SYN=1，seq=x</li><li>第二次握手：服务端表示收到请求并响应请求：SYN=1, ack=x+1,seq=y,ACK=1</li><li>第三次握手：客户端向服务器发送确认报文：seq=y+1, ACK=1。此时连接已建立</li></ul><h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><p><img src="https://raw.githubusercontent.com/wz71014q/img/master/TCP/break.jpg" alt="TCP-break"></p><ol><li>白话讲解（假设客户端先请求断开）：</li></ol><ul><li>第一次挥手：客户端：我说完了，咱们断开吧</li><li>第二次挥手：服务端：收到，我还没说完，￥@#<em>（%&amp;……</em></li><li>第三次挥手：服务端：我说完了，咱们断开吧</li><li>第四次挥手：客户端：收到！(此时已断开，如果长时间没收到答复，也会默认断开)</li></ul><ol start="2"><li>专业解释：</li></ol><ul><li>第一次挥手：客户端：FIN=1，seq=u，客户端已停止向服务端发送数据</li><li>第二次挥手：服务端：ack=u+1,seq=v，客户端已停止，但服务端还在发送数据</li><li>第三次挥手：服务端：内容发送完成后，在最后一段报文的首部：FIN=1，ACK=1，ack=u+1，seq=w，并且不再发送数据</li><li>第四次挥手：客户端：对服务器应答，表示确认断开,ACK=1，seq=u+1，ack=w+1</li></ul><h4 id="TCP与UDP的区别"><a href="#TCP与UDP的区别" class="headerlink" title="TCP与UDP的区别"></a>TCP与UDP的区别</h4><p>UDP报文结构：</p><p>16位源端口，16位目标端口，16位UDP长度，16位UDP校验和，数据</p><p>TCP是面向连接的，传输之前必须先握手，UPD不面向连接，直接传就完事了，但是对方收没收到是没底的。因此TCP更安全可靠，UDP效率更高</p><h3 id="OSI五层模型"><a href="#OSI五层模型" class="headerlink" title="OSI五层模型"></a>OSI五层模型</h3><p><img src="https://raw.githubusercontent.com/wz71014q/img/master/osi/osi.png" alt="osi-module"></p><p>TCP属于传输层，TCP连接建立起来后会通知上层应用，进行其他活动。根据OSI(Open System Interconnect，开放式系统互联)五层模型，它的上层是应用层，下层还有网络层、数据链路层和物理层。其中，发送方从上到下一层层包装，分别依次序加上TCP首部、IP首部、以太网首部，通过物理层传输到接收方，接收方再由下到上逐层解析，最后到达应用层。</p><h3 id="http请求"><a href="#http请求" class="headerlink" title="http请求"></a>http请求</h3><h4 id="http请求-1"><a href="#http请求-1" class="headerlink" title="http请求"></a>http请求</h4><p>TCP连接建立起来后开始发送一个http请求，http请求报文由请求行(request line)、请求头(header)、空行和请求数据4个部分组成</p><ol><li>请求行</li></ol><ul><li>请求方法：GET(http/0.9)，POST(http/1.0)，HEAD(http/1.0)，PUT(http/1.1)，DELETE(http/1.1)，OPTIONS(http/1.1)，TRACE(http/1.1)，CONNECT(http/1.1)</li><li>请求地址：URL(统一资源定位符)，组成格式：&lt;协议(http/https)&gt;://<host>:&lt;端口&gt;/&lt;路径&gt;</host></li><li>协议版本：http0.9、http1.0</li></ul><ol start="2"><li>请求头</li></ol><p>常见http请求头：</p><ul><li>Host: 服务器IP地址或域名</li><li>User-Agent: 发送请求的客户端系统和浏览器信息</li><li>Connection: Keep-Alive 等，表示连接状态</li><li>Accept-Encoding: 通知服务端可以发送的数据压缩格式</li><li>Accept-Charset: 通知服务端可以发送的编码格式</li><li>Accept-Language: 通知服务端可以发送的语言</li><li>Cache-Control: 通过指定指令来实现缓存机制。比如private，public、no-cache</li><li>Cookie: 存储一些用户信息、sessionId等</li><li>Range: byte=0-5 指定第一个字节和最后一个字节的位置，告诉服务器自己想提取哪些字节</li><li>Content-Security-Policy 用来开启CSP(内容安全策略)</li></ul><ol start="3"><li>请求数据</li></ol><p>可选有或者没有，比如name=Alice</p><h4 id="http响应"><a href="#http响应" class="headerlink" title="http响应"></a>http响应</h4><p>http响应报文主要包含状态行、响应头部、空行及响应数据组成。</p><ol><li>状态行：主要由协议版本、状态码、状态码描述组成</li></ol><ul><li>协议版本：http/1.1</li><li>状态码：见<a href="https://wz71014q.github.io/2018/08/09/http%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2/" target="_blank" rel="noopener">http发展历史</a>;</li><li>状态码描述：当前状态的描述。比如: 200 ok</li></ul><ol start="2"><li>响应头部</li></ol><p>常见http响应头：</p><ul><li>Content-Type: text/html;charset=UTF-8 告诉客户端，资源文件的类型，还有字符编码，客户端据此进行解码</li><li>Content-Encoding: 告诉客户端，服务端发送的资源都是gzip编码的</li><li>Date: 服务器发送资源的GMT(格林尼治时间)时间</li><li>Server: 服务器和相对应的版本</li><li>Transfer-Encoding: chunked 通知客户端，服务器发送的资源是分块发送的</li><li>Last-Modified: 最后一次更新时间</li><li>Connection: Keep-Alive 等，表示连接状态</li><li>Access-Control-Allow-Origin: *  表示所有网站可以跨域资源共享</li><li>Access-Control-Allow-Methods: GET, POST, PUT, OPTIONS 允许哪些方法访问</li><li>Access-Control-Allow-Credentials: true 是否允许发送Cookie</li><li>Content-Range 响应覆盖的范围和整体长度</li><li>ETag 判断服务器资源是否更改</li><li>Refresh 用于重定向</li></ul><ol start="3"><li>响应数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK　　<span class="comment">// 状态行</span></span><br><span class="line"><span class="built_in">Date</span>: Sun, <span class="number">17</span> Mar <span class="number">2017</span> <span class="number">08</span>:<span class="number">12</span>:<span class="number">54</span> GMT　　<span class="comment">// 响应头部</span></span><br><span class="line">Server: Apache/<span class="number">2.2</span><span class="number">.8</span> (Win32) PHP/<span class="number">5.2</span><span class="number">.5</span></span><br><span class="line">X-Powered-By: PHP/<span class="number">5.2</span><span class="number">.5</span></span><br><span class="line"><span class="built_in">Set</span>-Cookie: PHPSESSID=c0huq7pdkmm5gg6osoe3mgjmm3; path=<span class="regexp">/</span></span><br><span class="line"><span class="regexp">Expires: Thu, 19 Nov 1981 08:52:00 GMT</span></span><br><span class="line"><span class="regexp">Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0</span></span><br><span class="line"><span class="regexp">Pragma: no-cache</span></span><br><span class="line"><span class="regexp">Content-Length: 4393</span></span><br><span class="line"><span class="regexp">Keep-Alive: timeout=5, max=100</span></span><br><span class="line"><span class="regexp">Connection: Keep-Alive</span></span><br><span class="line"><span class="regexp">Content-Type: text/</span>html; charset=utf<span class="number">-8</span></span><br><span class="line"><span class="comment">// 空行</span></span><br><span class="line"><span class="comment">// 响应数据</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;HTTP响应示例&lt;title&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">Hello HTTP!</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>http缓存优化方案</li></ol><ul><li><p>在一次请求中，服务器会返回客户端Last-Modified时间，那么下次请求中，客户端就可以在请求头中添加If-Modified-Since+时间，如果没变，服务端会回状态码304，那么客户端就可以继续使用本地缓存展示内容。如果改变了，就返回200，并返回新的资源。</p></li><li><p>或者使用ETag（资源标识符）。在一次请求中，服务端会返回ETag，它是一串根据内容生成的字符串。下次请求时，客户端会加上请求头：<br>If-None-Match：33a64df551425fcc55e4d42a148795d9f25f89d4，服务端将该值与资源的ETag进行比较，如果相同，返回304，如果不同，就返回200和新的资源。</p></li></ul><h3 id="https请求"><a href="#https请求" class="headerlink" title="https请求"></a>https请求</h3><p>https与http的区别在于，应用层中，应用数据先经过SSL/TLS进行加密，再经过TCP连接</p><h4 id="加密原理"><a href="#加密原理" class="headerlink" title="加密原理"></a>加密原理</h4><p>&emsp;&emsp;<a href="https://developers.weixin.qq.com/community/develop/article/doc/000046a5fdc7802a15f7508b556413" target="_blank" rel="noopener">安利这篇文章</a></p><p>&emsp;&emsp;客户端在向服务端发送请求时，服务端会返回自己的公钥（保险箱），客户端将数据根据服务端的公钥加密（把数据放在保险箱里），再返回给服务端，服务端用之前给客户端公钥相匹配的私钥（保险箱钥匙）解密，即得到传输的数据。<br>&emsp;&emsp;为了保证服务端返回的公钥(保险箱)没有被中间黑客替换，需要证明该公钥（保险箱）确实是服务端给的。这时候数字证书(身份证)登场了。数字证书(身份证)是政府机构或者一些受信任的组织（证明人）为网站做的证明。它是CA将私钥发放给受信任的机构，公钥会发给各客户端。服务端在给客户端发送公钥时就可以用该证书加密公钥，发送给客户端，客户端用CA的公钥解密并验证完整性，通过后再传输数据。所以，流程变化如下：</p><ol><li>客户端发送请求</li><li>服务端返回自己的用数字证书加密过的公钥</li><li>客户端解析证书，包括正确性和完整性</li><li>传送加密信息</li><li>服务端解密信息，并使用客户端传给服务端的私钥加密信息</li><li>服务端向客户端传输加密后的信息</li><li>客户端解密</li></ol><h4 id="SSL-TLS握手过程"><a href="#SSL-TLS握手过程" class="headerlink" title="SSL/TLS握手过程"></a>SSL/TLS握手过程</h4><ol><li>客户端向服务端发送Client Hello信息，里面包含一个客户端生成的随机数Random1，支持的加密套件、SSL版本</li><li>服务端返回Server Hello消息。服务端根据刚才客户端上报的支持的加密套件，确定一种加密方式，在这条信息中一块传给客户端。同时生成另一个随机数一块传给客户端</li><li>Certificate: 服务端将自己的证书下发给客户端，客户端用对应公钥解密，取出其中的公钥</li><li>Certificate Request(可选): 服务端要求客户端上报证书。</li><li>Sever Hello Done: 服务端通知客户端 Server Hello 结束</li><li>Certificate Verify: 客户端收到证书后，先从CA验证证书是否合法，合法后取出公钥。再生成一个随机数Random3，用公钥非对称加密(RSA等)Random3，生成PreMaster Key。</li><li>Client Key Exchange：客户端根据服务器传来的公钥生成了 PreMaster Key后，将这个 key 传给服务端，服务端再用自己的私钥解出这个 PreMaster Key 得到客户端生成的 Random3。至此，客户端和服务端都拥有 Random1 + Random2 + Random3，两边再根据同样的算法就可以生成一份秘钥，握手结束后的应用层数据都是使用这个秘钥进行对称加密。</li></ol><h3 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h3><p>浏览器拿到HTML文档后，开始解析并渲染页面</p><h4 id="渲染过程"><a href="#渲染过程" class="headerlink" title="渲染过程"></a>渲染过程</h4><ol><li>解析HTML生成DOM(文档对象模型)树</li><li>解析CSS生成CSSOM(CSS对象模型)树</li><li>将DOM树与CSSOM树结合为渲染树</li><li>根据渲染树设计布局(layout)，计算节点大小、布局</li><li>绘制节点</li></ol><h4 id="JS解析"><a href="#JS解析" class="headerlink" title="JS解析"></a>JS解析</h4><p>浏览器的内核是多线程的，一个浏览器至少会有三个线程：javascript处理线程、GUI渲染线程、事件触发线程</p><ul><li>JavaScript是事件驱动型的单线程语言，js处理引擎也是单线程，js一直等待着任务队列中任务的到来，然后加以处理</li><li>GUI渲染线程负责浏览器的渲染工作，浏览器发生回流或重绘时该线程就会触发。GUI线程与JavaScript线程是互斥的。只要JavaScript线程执行，GUI渲染线程就会挂起。一般是等待JavaScript线程执行结束，再从等待队列中取出GUI渲染线程执行。</li><li>事件触发线程。当一个事件被触发时，该线程会把该事件添加进事件触发队列的队尾，等待js引擎处理。</li><li>JS文件默认是阻塞进程的，所以为了用户体验，最佳实践是link标签放head标签而script放body底部。或者加上defer，延迟加载；加上async，异步加载。</li></ul><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p><a href="https://wz71014q.github.io/2019/03/23/CSS-%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E7%BB%98/" target="_blank" rel="noopener">回流与重绘</a></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.jianshu.com/p/668970142765" target="_blank" rel="noopener">https://www.jianshu.com/p/668970142765</a><br><a href="https://segmentfault.com/a/1190000013522717" target="_blank" rel="noopener">https://segmentfault.com/a/1190000013522717</a><br><a href="https://juejin.im/post/5c17d3cd5188250d9e604628" target="_blank" rel="noopener">https://juejin.im/post/5c17d3cd5188250d9e604628</a><br><a href="https://my.oschina.net/elitetao/blog/781227" target="_blank" rel="noopener">https://my.oschina.net/elitetao/blog/781227</a><br><a href="https://developers.weixin.qq.com/community/develop/article/doc/000046a5fdc7802a15f7508b556413" target="_blank" rel="noopener">https://developers.weixin.qq.com/community/develop/article/doc/000046a5fdc7802a15f7508b556413</a><br><a href="https://www.jianshu.com/p/7158568e4867" target="_blank" rel="noopener">https://www.jianshu.com/p/7158568e4867</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;解析过程&quot;&gt;&lt;a href=&quot;#解析过程&quot; class=&quot;headerlink&quot; title=&quot;解析过程&quot;&gt;&lt;/a&gt;解析过程&lt;/h2&gt;&lt;p&gt;1、DNS解析&lt;br&gt;2、TCP连接&lt;br&gt;3、发起http请求&lt;br&gt;4、服务器处理http请求&lt;br&gt;5、服务器响应http请求&lt;br&gt;6、浏览器渲染页面&lt;br&gt;7、连接结束&lt;/p&gt;
&lt;h3 id=&quot;DNS解析&quot;&gt;&lt;a href=&quot;#DNS解析&quot; class=&quot;headerlink&quot; title=&quot;DNS解析&quot;&gt;&lt;/a&gt;DNS解析&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;输入网址，浏览器并不知道要去哪里找资源，需要DNS递归查询对应IP&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DNS递归查询首先是在本地服务器进行查询，本地服务器找不到后再向根域名服务器查询，根域名服务器找不到再向上一级顶级com域名服务器查找。直到最终找到并返回IP，然后本地域名服务器会将该ip缓存起来，供下次使用。比如输入&lt;a href=&quot;http://www.google.com，那么查询过程为.-&amp;gt;.com-&amp;gt;google.com-&amp;gt;www.google.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.google.com，那么查询过程为.-&amp;gt;.com-&amp;gt;google.com-&amp;gt;www.google.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;此处优化方法：&lt;br&gt;DNS缓存：浏览器、系统（host文件）、路由器、ISP DNS缓存（互联网提供商）、本地域名服务器等都有缓存&lt;br&gt;DNS负载均衡：根据地理位置、服务器负载量等来选择最合适的一个服务器来进行查询&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;TCP连接：三次握手，四次挥手&quot;&gt;&lt;a href=&quot;#TCP连接：三次握手，四次挥手&quot; class=&quot;headerlink&quot; title=&quot;TCP连接：三次握手，四次挥手&quot;&gt;&lt;/a&gt;TCP连接：三次握手，四次挥手&lt;/h3&gt;&lt;h4 id=&quot;TCP报文结构：&quot;&gt;&lt;a href=&quot;#TCP报文结构：&quot; class=&quot;headerlink&quot; title=&quot;TCP报文结构：&quot;&gt;&lt;/a&gt;TCP报文结构：&lt;/h4&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://github.com/wz71014q/categories/CSS/"/>
    
      <category term="JS" scheme="https://github.com/wz71014q/categories/JS/"/>
    
      <category term="http" scheme="https://github.com/wz71014q/categories/http/"/>
    
      <category term="个人笔记" scheme="https://github.com/wz71014q/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
      <category term="面试" scheme="https://github.com/wz71014q/categories/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="网络" scheme="https://github.com/wz71014q/categories/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="https" scheme="https://github.com/wz71014q/categories/https/"/>
    
      <category term="TCP" scheme="https://github.com/wz71014q/categories/TCP/"/>
    
      <category term="DNS" scheme="https://github.com/wz71014q/categories/DNS/"/>
    
    
      <category term="JS" scheme="https://github.com/wz71014q/tags/JS/"/>
    
      <category term="http" scheme="https://github.com/wz71014q/tags/http/"/>
    
      <category term="个人笔记" scheme="https://github.com/wz71014q/tags/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
      <category term="面试" scheme="https://github.com/wz71014q/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="网络" scheme="https://github.com/wz71014q/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="https" scheme="https://github.com/wz71014q/tags/https/"/>
    
      <category term="TCP" scheme="https://github.com/wz71014q/tags/TCP/"/>
    
      <category term="DNS" scheme="https://github.com/wz71014q/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>js面试题目之连续赋值</title>
    <link href="https://github.com/wz71014q/2019/08/06/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E4%B9%8Bjs%E8%BF%9E%E7%BB%AD%E8%B5%8B%E5%80%BC/"/>
    <id>https://github.com/wz71014q/2019/08/06/面试题目之js连续赋值/</id>
    <published>2019-08-06T11:08:00.000Z</published>
    <updated>2019-09-26T03:31:07.519Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;图解经典面试题之连续赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=b=&#123;<span class="attr">n</span>: <span class="number">1</span>&#125;;</span><br><span class="line">a.x=a=&#123;<span class="attr">n</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wz71014q/img/master/jsbasic/assignment.png" alt="assignment"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp;&amp;ensp;图解经典面试题之连续赋值&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="JS" scheme="https://github.com/wz71014q/categories/JS/"/>
    
      <category term="面试" scheme="https://github.com/wz71014q/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="JS" scheme="https://github.com/wz71014q/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>疑难杂症记录</title>
    <link href="https://github.com/wz71014q/2019/06/21/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87%E8%AE%B0%E5%BD%95/"/>
    <id>https://github.com/wz71014q/2019/06/21/疑难杂症记录/</id>
    <published>2019-06-21T12:00:00.000Z</published>
    <updated>2019-09-26T03:31:07.517Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;前端内容繁复，平时难免会碰到一些奇奇怪怪或者暂时无法理解的问题，所以特开此文将这些问题记录下来。</p><h2 id="屏幕适配问题"><a href="#屏幕适配问题" class="headerlink" title="屏幕适配问题"></a>屏幕适配问题</h2><p>&emsp;&emsp;问题描述：移动端的屏幕适配问题，至今没有想明白是什么原因</p><p>&emsp;&emsp;出现场景：移动端App webview内。</p><p>&emsp;&emsp;复现步骤：刚开始手机字体大小为正常，打开页面后将App切后台，调整手机字体大小到最大，即出现这种情况。理论上webview内部不应该受到系统字体的影响，在原生中将该功能禁用即可。但是奇怪的是根元素的字体大小确实设置为18px，最终计算出来的字体大小却是27px。</p><p>html中已经禁止了页面缩放，但是并没有效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1, width=device-width"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wz71014q/img/master/problems/scale.png" alt="scale"></p><p>&emsp;&emsp;解决方案：计算最后放大了多少倍，同比缩小：</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>;</span><br><span class="line">  <span class="keyword">var</span> resizeTimeout;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resizeThrottler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!resizeTimeout) &#123;</span><br><span class="line">      resizeTimeout = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        resizeTimeout = <span class="literal">null</span>;</span><br><span class="line">        actualResizeHandler();</span><br><span class="line">      &#125;, <span class="number">66</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">actualResizeHandler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fontsize = <span class="regexp">/^\d+/</span>.exec(<span class="built_in">document</span>.documentElement.style.fontSize);</span><br><span class="line">    <span class="keyword">var</span> cmtFont =  <span class="regexp">/^\d+/</span>.exec(<span class="built_in">window</span>.getComputedStyle(<span class="built_in">document</span>.getElementsByTagName(<span class="string">"html"</span>)[<span class="number">0</span>]).fontSize);</span><br><span class="line">    <span class="keyword">var</span> radio = <span class="built_in">Number</span>(fontsize) / <span class="built_in">Number</span>(cmtFont);</span><br><span class="line">    <span class="keyword">if</span> (radio !== <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">document</span>.documentElement.style.fontSize = <span class="number">18</span> * radio + <span class="string">'px'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.addEventListener) <span class="keyword">return</span>;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(resizeEvt, resizeThrottler, <span class="literal">false</span>);</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, resizeThrottler, <span class="literal">false</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>一次偶然的发现，找出了上述问题的原因：DPR。由于系统字体变大，导致DPR变大，进而最终计算属性与设置属性不同。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;前端内容繁复，平时难免会碰到一些奇奇怪怪或者暂时无法理解的问题，所以特开此文将这些问题记录下来。&lt;/p&gt;
&lt;h2 id=&quot;屏幕适配问题&quot;&gt;&lt;a href=&quot;#屏幕适配问题&quot; class=&quot;headerlink&quot; title=&quot;屏幕适配问题&quot;&gt;&lt;/a&gt;屏幕适配问题&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;问题描述：移动端的屏幕适配问题，至今没有想明白是什么原因&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;出现场景：移动端App webview内。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;复现步骤：刚开始手机字体大小为正常，打开页面后将App切后台，调整手机字体大小到最大，即出现这种情况。理论上webview内部不应该受到系统字体的影响，在原生中将该功能禁用即可。但是奇怪的是根元素的字体大小确实设置为18px，最终计算出来的字体大小却是27px。&lt;/p&gt;
&lt;p&gt;html中已经禁止了页面缩放，但是并没有效果。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1, width=device-width&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wz71014q/img/master/problems/scale.png&quot; alt=&quot;scale&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;解决方案：计算最后放大了多少倍，同比缩小：&lt;/p&gt;
    
    </summary>
    
      <category term="HTML" scheme="https://github.com/wz71014q/categories/HTML/"/>
    
      <category term="兼容" scheme="https://github.com/wz71014q/categories/%E5%85%BC%E5%AE%B9/"/>
    
    
      <category term="CSS" scheme="https://github.com/wz71014q/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Vue单元测试踩坑记录</title>
    <link href="https://github.com/wz71014q/2019/06/05/Vue%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://github.com/wz71014q/2019/06/05/Vue单元测试踩坑记录/</id>
    <published>2019-06-05T12:00:00.000Z</published>
    <updated>2020-03-31T02:09:04.124Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;为了提高代码设计水平，测试是必不可少的。<a href="https://jestjs.io/zh-Hans/" target="_blank" rel="noopener">jest</a>是facebook出的一个测试框架，里面自带断言库，而且VUE有个<a href="https://vue-test-utils.vuejs.org/zh/" target="_blank" rel="noopener">Vue Test Utils</a>提供了官方支持，因此这里使用jest构建VUE单元测试部分。开始前建议先浏览一下官方网站，进行初步了解。</p><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><h3 id="安装-amp-简易demo"><a href="#安装-amp-简易demo" class="headerlink" title="安装&amp;简易demo"></a>安装&amp;简易demo</h3><p>新建一个文件夹，然后执行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line">npm install jest -g</span><br></pre></td></tr></table></figure><p>这就安装好了，接下来写一个简单的函数：</p><p><img src="https://raw.githubusercontent.com/wz71014q/img/master/jest/jestSimpleDemo.png" alt="jestSimpleDemo"></p><p>然后在你的项目文件夹下执行jest, 就会自动搜索所有.test.js和.spec.js文件进行测试。</p><h3 id="增加配置"><a href="#增加配置" class="headerlink" title="增加配置"></a>增加配置</h3><p>接着我们改一下目录，增加一个SRC文件夹，里面放着我们的原文件，然后新建test文件夹，将测试文件全部放进去<br><img src="https://raw.githubusercontent.com/wz71014q/img/master/jest/jestES6Demo.png" alt="jestES6Demo"><br>在demo.test.js中添加代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.test.js</span></span><br><span class="line"><span class="keyword">import</span> checkNumber <span class="keyword">from</span> <span class="string">'../src/demo/demo'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'decribe用来生成一个组'</span>, () =&gt; &#123;</span><br><span class="line">  test(<span class="string">'checkNumber'</span>, ()=&gt; &#123;</span><br><span class="line">    expect(checkNumber(<span class="number">2</span>, <span class="number">3</span>)).toBe(<span class="number">5</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><p>这时直接运行会报错，因为默认不支持ES6的部分语法，所以需要安装babel（<font color="#FF0000">注意babel的版本</font>）进行转译：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/core @babel/preset-env babel-jest -D</span><br></pre></td></tr></table></figure><p>在根目录新增babel.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// babel.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        targets: &#123;</span><br><span class="line">          node: <span class="string">'current'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>并且在package.json中配置好入口文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"jestdemo"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"jest"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@babel/core"</span>: <span class="string">"^7.4.5"</span>,</span><br><span class="line">    <span class="attr">"@babel/preset-env"</span>: <span class="string">"^7.4.5"</span>,</span><br><span class="line">    <span class="attr">"babel-jest"</span>: <span class="string">"^24.8.0"</span>,</span><br><span class="line">    <span class="attr">"jest"</span>: <span class="string">"^24.8.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jest.config.js是jest配置文件，后面一些配置就在这里添加。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jest.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>jest运行时会自动寻找默认的jest.config.js配置文件。如果要自定义目录，需要在package.json中指定路径： </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">   "test": "jest --config ./test/jest.config.js"</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>执行:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run test</span><br></pre></td></tr></table></figure><p>得到以下结果，说明执行成功！<br><img src="https://raw.githubusercontent.com/wz71014q/img/master/jest/jestDemoSuccess.png" alt="jestDemoSuccess"></p><h2 id="测试Vue组件"><a href="#测试Vue组件" class="headerlink" title="测试Vue组件"></a>测试Vue组件</h2><p>&emsp;&emsp;Vue官方给我们提供了<a href="https://vue-test-utils.vuejs.org/zh/" target="_blank" rel="noopener">Vue Test Utils</a>单元测试工具，Vue Test Utils 通过将组件隔离挂载，然后模拟必要的输入 (prop、注入和用户事件) 和对输出 (渲染结果、触发的自定义事件) 的断言来测试 Vue 组件。被挂载的组件会返回到一个包裹器内，而包裹器会暴露很多封装、遍历和查询其内部的 Vue 组件实例的便捷的方法。</p><h3 id="简易Demo"><a href="#简易Demo" class="headerlink" title="简易Demo"></a>简易Demo</h3><p>以一个简单的组件为例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    hello &#123;&#123; msg &#125;&#125;</span><br><span class="line">    &lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"text"</span>&gt;I<span class="string">'m jest demo&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;button class="count" @click="increment"&gt;Increment &#123;&#123; count &#125;&#125;&lt;/button&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">  name: '</span>Hello<span class="string">',</span></span><br><span class="line"><span class="string">  data() &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">      msg: '</span>picker<span class="string">',</span></span><br><span class="line"><span class="string">      count: 0</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  methods: &#123;</span></span><br><span class="line"><span class="string">    increment() &#123;</span></span><br><span class="line"><span class="string">      this.count++;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><!-- 这种只有组件内部数据交互，没有引用外部图片的资源的文件，只要添加对.vue文件的支持就可以了 --><p>添加依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-jest @vue/test-utils jest-serializer-vue -D</span><br></pre></td></tr></table></figure><p>参考vue-cli2，修改<a href="https://jestjs.io/docs/zh-Hans/configuration" target="_blank" rel="noopener">jest配置</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jest.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  rootDir: path.resolve(__dirname, <span class="string">'./'</span>),</span><br><span class="line">  moduleFileExtensions: [<span class="string">'js'</span>, <span class="string">'json'</span>, <span class="string">'jsx'</span>, <span class="string">'ts'</span>, <span class="string">'tsx'</span>, <span class="string">'node'</span>, <span class="string">'vue'</span>], <span class="comment">// 处理这些文件</span></span><br><span class="line">  moduleDirectories: [<span class="string">'node_modules'</span>, <span class="string">'assets'</span>], <span class="comment">// 从这些目录去查找资源</span></span><br><span class="line">  moduleNameMapper: &#123; <span class="comment">// 进行转译, identity-obj-proxy用来模拟输入</span></span><br><span class="line">    <span class="string">'^@/(.*)$'</span>: <span class="string">'&lt;rootDir&gt;/assets/'</span>,</span><br><span class="line">    <span class="string">'\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$'</span>: <span class="string">'identity-obj-proxy'</span>,</span><br><span class="line">    <span class="string">'\\.(css|less|scss)$'</span>: <span class="string">'identity-obj-proxy'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  transform: &#123; <span class="comment">// 可以理解成loader</span></span><br><span class="line">    <span class="string">'^.+\\.js$'</span>: <span class="string">'babel-jest'</span>,</span><br><span class="line">    <span class="string">'.*\\.(vue)$'</span>: <span class="string">'vue-jest'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  transformIgnorePatterns: [<span class="string">'&lt;rootDir&gt;/node_modules/'</span>],</span><br><span class="line">  testPathIgnorePatterns: [ <span class="comment">// 忽略测试文件</span></span><br><span class="line">    <span class="string">'&lt;rootDir&gt;/projects/'</span>,</span><br><span class="line">    <span class="string">'&lt;rootDir&gt;/test/sub.test.js'</span></span><br><span class="line">  ],</span><br><span class="line">  testRegex: <span class="string">'hello.test.js'</span>, <span class="comment">// 测试指定格式文件，默认全部.test.js(x)和.spec.js(x)文件</span></span><br><span class="line">  snapshotSerializers: [<span class="string">'&lt;rootDir&gt;/node_modules/jest-serializer-vue'</span>], <span class="comment">// 快照的序列化工具</span></span><br><span class="line">  collectCoverage: <span class="literal">true</span>, <span class="comment">// 测试覆盖率</span></span><br><span class="line">  coverageDirectory: <span class="string">'&lt;rootDir&gt;/test/coverage'</span>,</span><br><span class="line">  collectCoverageFrom: [ <span class="comment">// 测试覆盖率</span></span><br><span class="line">    <span class="string">'&lt;rootDir&gt;/testDemo/**/*.&#123;js,vue&#125;'</span>,</span><br><span class="line">    <span class="string">'!**/node_modules/**'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>写测试文件:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.test.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">'@vue/test-utils'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; renderToString &#125; <span class="keyword">from</span> <span class="string">'@vue/server-test-utils'</span>;</span><br><span class="line"><span class="keyword">import</span> hello <span class="keyword">from</span> <span class="string">'../testDemo/hello.vue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wrapper;</span><br><span class="line"><span class="keyword">let</span> vm;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'vue组件测试'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 每次测试前确保我们的测试实例都是是干净完整的。返回一个wrapper对象</span></span><br><span class="line">    wrapper = mount(hello);</span><br><span class="line">  &#125;);</span><br><span class="line">  afterEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    vm &amp;&amp; vm.$destroy();</span><br><span class="line">    wrapper &amp;&amp; wrapper.destroy();</span><br><span class="line">  &#125;);</span><br><span class="line">  it(<span class="string">'Dom'</span>, () =&gt; &#123;</span><br><span class="line">    expect(wrapper.contains(<span class="string">'div'</span>)).toBe(<span class="literal">true</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(<span class="string">'Content'</span>, () =&gt; &#123;</span><br><span class="line">    expect(wrapper.find(<span class="string">'.text'</span>).text())</span><br><span class="line">      .toEqual(<span class="string">'I\'m jest demo'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(<span class="string">'Trigger'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> button = wrapper.find(<span class="string">'.count'</span>);</span><br><span class="line">    button.trigger(<span class="string">'click'</span>);</span><br><span class="line">    expect(button.text())</span><br><span class="line">      .toEqual(<span class="string">'Increment 1'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(<span class="string">'renderToString render component as a html'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> str = <span class="keyword">await</span> renderToString(hello);</span><br><span class="line">    expect(str).toContain(<span class="string">'&lt;p class="text"&gt;I\'m jest demo&lt;/p&gt;'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中的API根据<a href="https://vue-test-utils.vuejs.org/zh/api/wrapper/#setvalue" target="_blank" rel="noopener">官方文档</a>自行调整，配置完毕后再次运行，出现以下结果即说明测试通过：</p><p><img src="https://raw.githubusercontent.com/wz71014q/img/master/jest/helloVueTest.png" alt="helloVueTest"></p><p>图中的表格就是我们配置的测试覆盖率。其中的几个参数意思是：</p><blockquote><p>%stmts是语句覆盖率（statement coverage）：是否每个语句都执行了<br>%Branch是分支覆盖率（branch coverage）：是否每个if代码块都执行了<br>%Funcs是函数覆盖率（function coverage）：是否每个函数都调用了<br>%Lines行覆盖率（line coverage）：是否每一行都执行了</p></blockquote><p>从图中可以看出hello.vue文件的执行率全部为100%，并且全部通过测试。说明组件逻辑计算没有问题，实际使用怎样不能确定，但是肯定没有人为的失误问题。组件测试不一定非要追求100%，有些组件其实只要测试输入输出可以达到要求即可。</p><p>前面jest.conf.js中设置了覆盖率测试结果的输出路径(coverageDirectory)为test文件夹下的coverage，测试完成后就会自动生成：<br><img src="https://raw.githubusercontent.com/wz71014q/img/master/jest/coverage.png" alt="helloVueTest"></p><h3 id="组件挂载方式"><a href="#组件挂载方式" class="headerlink" title="组件挂载方式"></a>组件挂载方式</h3><p>&emsp;&emsp;我们要测试VUE组件，你得找个地方挂载它，这样才可以调用VUE实例的一些属性与方法。可以使用Vue Test Utils官方API创建一个包裹器wrapper，将组件挂载上去，也可以收到创建VNode，只渲染，不挂载：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue Test Utils API</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">'@vue/test-utils'</span>;</span><br><span class="line"><span class="keyword">import</span> hello <span class="keyword">from</span> <span class="string">'./hello.vue'</span>;</span><br><span class="line"></span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 每次测试前确保我们的测试实例都是是干净完整的。返回一个wrapper对象</span></span><br><span class="line">  wrapper = mount(hello);</span><br><span class="line">&#125;);</span><br><span class="line">describe(<span class="string">'hello'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'renders a div'</span>, () =&gt; &#123;</span><br><span class="line">    expect(wrapper.contains(<span class="string">'div'</span>)).toBe(<span class="literal">true</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 Vue.$mount() 手动挂载</span></span><br><span class="line"><span class="keyword">import</span> hello <span class="keyword">from</span> <span class="string">'./hello.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Constructor = Vue.extend(hello);</span><br><span class="line"><span class="comment">// 渲染但不往Dom挂载，即可调用Vue实例的属性和方法</span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Constructor().$mount();</span><br></pre></td></tr></table></figure><ul><li>简单组件可以用Vue Test Utils的API，挂载时顺便将slot、propsData设置好，检测输出的结果是否符合预期。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 举例</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> sinon <span class="keyword">from</span> <span class="string">'sinon'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; mount, shallowMount &#125; <span class="keyword">from</span> <span class="string">'@vue/test-utils'</span>;</span><br><span class="line"><span class="keyword">import</span> index <span class="keyword">from</span> <span class="string">'../index.vue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wrapper;</span><br><span class="line"><span class="keyword">let</span> vm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> leftSlot = <span class="string">'&lt;div class="leftSlot"&gt;left icon&lt;/div&gt;'</span>;</span><br><span class="line"><span class="keyword">const</span> left = <span class="string">'&lt;p class="leftText"&gt;left text&lt;/p&gt;'</span></span><br><span class="line"><span class="keyword">const</span> right = <span class="string">'&lt;p class="rightText"&gt;right text&lt;/p&gt;'</span></span><br><span class="line"><span class="keyword">const</span> title = <span class="string">'&lt;p class="title"&gt;header title&lt;/p&gt;'</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'check index'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    wrapper = mount(index, &#123;</span><br><span class="line">      propsData: &#123;</span><br><span class="line">        theme: <span class="string">'transparent'</span>,</span><br><span class="line">        leftOptions: &#123;</span><br><span class="line">          showBack: <span class="literal">true</span>,</span><br><span class="line">          backText: <span class="string">'goBack'</span>,</span><br><span class="line">          preventGoBack: <span class="literal">false</span>,</span><br><span class="line">          showMore: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        title: <span class="string">'header组件'</span>,</span><br><span class="line">        transition: <span class="built_in">String</span>,</span><br><span class="line">        rightOptions: &#123;</span><br><span class="line">          showMore: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  afterEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    vm &amp;&amp; vm.$destroy();</span><br><span class="line">    wrapper &amp;&amp; wrapper.destroy();</span><br><span class="line">  &#125;);</span><br><span class="line">  it(<span class="string">'DOM'</span>, () =&gt; &#123;</span><br><span class="line">    expect(wrapper.find(<span class="string">'.title'</span>).text()).toBe(<span class="string">'header组件'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>复杂组件可以创建一个Vue的实例对象，在这个对象里引用你的组件，调用相关的API测试结果。下面这个例子是element-ui组件单元测试创建VUE实例的方法。使用时直接将引入的组件挂在创建的实例上即可。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createElm = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> elm = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(elm);</span><br><span class="line">  <span class="keyword">return</span> elm;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个 Vue 的实例对象</span></span><br><span class="line"><span class="comment"> * @param  &#123;Object|String&#125;  Compo   组件配置，可直接传 template</span></span><br><span class="line"><span class="comment"> * @param  &#123;Boolean=false&#125; mounted 是否添加到 DOM 上</span></span><br><span class="line"><span class="comment"> * @return &#123;Object&#125; vm</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createVue = <span class="function"><span class="keyword">function</span>(<span class="params">Compo, mounted = false</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(Compo) === <span class="string">'[object String]'</span>) &#123;</span><br><span class="line">    Compo = &#123; <span class="attr">template</span>: Compo &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Vue(Compo).$mount(mounted === <span class="literal">false</span> ? <span class="literal">null</span> : createElm());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件挂载</span></span><br><span class="line"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">'../child.vue'</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">'create'</span>, done =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> vm = createVue(&#123;</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;button class="btn"&gt;a button&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;child</span></span><br><span class="line"><span class="string">          ref="autocomplete"</span></span><br><span class="line"><span class="string">          v-model="state"</span></span><br><span class="line"><span class="string">          :options="options"</span></span><br><span class="line"><span class="string">          @handle="handle"</span></span><br><span class="line"><span class="string">        &gt;</span></span><br><span class="line"><span class="string">          hello world</span></span><br><span class="line"><span class="string">        &lt;/child&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        restaurants: [],</span><br><span class="line">        state: <span class="string">''</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          show: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handle(res) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'handle'</span> + res);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> elm = vm.$el;</span><br><span class="line">  <span class="keyword">let</span> btnElm = elm.querySelector(<span class="string">'btn'</span>);</span><br><span class="line">  expect(btnElm.text()).toBe(<span class="string">'a button'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="复杂Vue组件"><a href="#复杂Vue组件" class="headerlink" title="复杂Vue组件"></a>复杂Vue组件</h3><p>&emsp;&emsp;这里的复杂表示组件内包含Vuex、VueRouter等常用配套插件，不包括组件的业务逻辑</p><h4 id="配合-Vue-Router-使用"><a href="#配合-Vue-Router-使用" class="headerlink" title="配合 Vue Router 使用"></a><a href="https://vue-test-utils.vuejs.org/zh/guides/using-with-vue-router.html" target="_blank" rel="noopener">配合 Vue Router 使用</a></h4><p>路由测试有三种方法：</p><ol><li>使用了 router-link 或 router-view 的组件可以使用stub，但是一般项目都是编程式导航，因此使用第2种和第3种方式较好</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shallowMount &#125; <span class="keyword">from</span> <span class="string">'@vue/test-utils'</span></span><br><span class="line"></span><br><span class="line">shallowMount(Component, &#123;</span><br><span class="line">  stubs: [<span class="string">'router-link'</span>, <span class="string">'router-view'</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>引入要测试路由的组件，并创建一个真正的路由实例</li></ol><p>如图，路由中有两个组件，App.vue是根组件</p><p><img src="https://raw.githubusercontent.com/wz71014q/img/master/jest/router.png" alt="router"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./Home.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Menu <span class="keyword">from</span> <span class="string">'./Menu.vue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Home'</span>, <span class="attr">path</span>: <span class="string">'/Home'</span>, <span class="attr">component</span>: Home &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Menu'</span>, <span class="attr">path</span>: <span class="string">'/Menu'</span>, <span class="attr">component</span>: Menu &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123; routes &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.test.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount, createLocalVue &#125; <span class="keyword">from</span> <span class="string">'@vue/test-utils'</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./Home'</span>;</span><br><span class="line"><span class="keyword">import</span> Menu <span class="keyword">from</span> <span class="string">'./Menu'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> localVue = createLocalVue();</span><br><span class="line">localVue.use(VueRouter);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'router'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'App router test'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> wrapper = mount(App, &#123; localVue, router &#125;);</span><br><span class="line">    router.push(&#123; <span class="attr">name</span>: <span class="string">'Menu'</span> &#125;);</span><br><span class="line">    expect(wrapper.find(Menu).exists()).toBe(<span class="literal">true</span>);</span><br><span class="line">    router.push(&#123; <span class="attr">name</span>: <span class="string">'Home'</span> &#125;);</span><br><span class="line">    expect(wrapper.find(Home).exists()).toBe(<span class="literal">true</span>);</span><br><span class="line">    expect(wrapper.vm.$route.name).toBe(<span class="string">'Home'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>伪造 $route 和 $router</li></ol><p>如下，mock所需组件，并添加相关参数，检查最终结果是否符合预期</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.test.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; shallowMount, mount, createLocalVue &#125; <span class="keyword">from</span> <span class="string">'@vue/test-utils'</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./Home'</span>;</span><br><span class="line"><span class="keyword">import</span> Menu <span class="keyword">from</span> <span class="string">'./Menu'</span>;</span><br><span class="line"></span><br><span class="line">jest.mock(<span class="string">'./Home'</span>, () =&gt; (&#123;</span><br><span class="line">  name: <span class="string">'Home'</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(</span><br><span class="line">    <span class="string">'div'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      class: &#123;</span><br><span class="line">        show: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      attrs: &#123;</span><br><span class="line">        id: <span class="string">'txt'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'i\'m render text'</span></span><br><span class="line">  )</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Home'</span>, <span class="attr">path</span>: <span class="string">'/Home'</span>, <span class="attr">component</span>: Home &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Menu'</span>, <span class="attr">path</span>: <span class="string">'/Menu'</span>, <span class="attr">component</span>: Menu &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123; routes &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> localVue = createLocalVue();</span><br><span class="line">localVue.use(VueRouter);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'router'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'App router test'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 这里需要用mount挂载，所以为了不污染全局的Vue类，使用createLocalVue创建一个新的提供挂载router的类</span></span><br><span class="line">    <span class="keyword">const</span> wrapper = mount(App, &#123; localVue, router &#125;);</span><br><span class="line">    router.push(&#123; <span class="attr">name</span>: <span class="string">'Menu'</span> &#125;);</span><br><span class="line">    expect(wrapper.find(Menu).exists()).toBe(<span class="literal">true</span>);</span><br><span class="line">    router.push(&#123; <span class="attr">name</span>: <span class="string">'Home'</span> &#125;);</span><br><span class="line">    expect(wrapper.find(Home).exists()).toBe(<span class="literal">true</span>);</span><br><span class="line">    expect(wrapper.find(<span class="string">'#txt'</span>).text()).toBe(<span class="string">'i\'m render text'</span>);</span><br><span class="line">    expect(wrapper.vm.$route.name).toBe(<span class="string">'Home'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">describe(<span class="string">'Menu mock router'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'renders a username from query string'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> username = <span class="string">'alice'</span>;</span><br><span class="line">    <span class="comment">// shallowMount渲染的是一个替身组件，&lt;router-link&gt;会被忽略，上面的wrapper.find(Menu)也找不到，因为shallowMount的子组件是stub，不存在的。</span></span><br><span class="line">    <span class="keyword">const</span> wrapper = shallowMount(Menu, &#123;</span><br><span class="line">      mocks: &#123;</span><br><span class="line">        $route: &#123;</span><br><span class="line">          params: &#123; username &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    expect(wrapper.find(<span class="string">'.username'</span>).text()).toBe(username);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="增加快照"><a href="#增加快照" class="headerlink" title="增加快照"></a>增加快照</h3><p>&emsp;&emsp;当你的组件达到理想状态并测试无误后，可以将当前状态保存为一个快照，这样后面再有改动就可以跟这个快照对比，可以大大提高测试的速度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为HTML根元素设置快照</span></span><br><span class="line">describe(<span class="string">'vue组件测试'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    wrapper = mount(hello);</span><br><span class="line">  &#125;);</span><br><span class="line">  afterEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    vm &amp;&amp; vm.$destroy();</span><br><span class="line">    wrapper &amp;&amp; wrapper.destroy();</span><br><span class="line">  &#125;);</span><br><span class="line">  it(<span class="string">'snaps'</span>, () =&gt; &#123;</span><br><span class="line">    expect(wrapper.element).toMatchSnapshot();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;设置好快照，下次有更改的东西直接会提示出来：<br><img src="https://raw.githubusercontent.com/wz71014q/img/master/jest/snapshot.png" alt="snapshot"></p><p>更新快照可以用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jset -u</span><br></pre></td></tr></table></figure><h2 id="常用测试项"><a href="#常用测试项" class="headerlink" title="常用测试项"></a>常用测试项</h2><ol><li>检测Dom</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'renders a div'</span>, () =&gt; &#123;</span><br><span class="line">  expect(wrapper.contains(<span class="string">'div'</span>)).toBe(<span class="literal">true</span>);</span><br><span class="line">&#125;);</span><br><span class="line">it(<span class="string">'p标签的内容是I\'m jest demo'</span>, () =&gt; &#123;</span><br><span class="line">  expect(wrapper.find(<span class="string">'.text'</span>).text()).toEqual(<span class="string">'I\'m jest demo'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>检测类名</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'check classes'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> checkButton = wrapper.find(<span class="string">'.check-box'</span>);</span><br><span class="line">  expect(checkButton.classes()).toContain(<span class="string">'is-checked'</span>);</span><br><span class="line">  expect(checkButton.classes().indexOf(<span class="string">'checked'</span>) === <span class="number">-1</span>).toBe(<span class="literal">true</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>检测样式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'传递的颜色应该是#fff'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> icon = wrapper.find(<span class="string">'.icon'</span>);</span><br><span class="line">  expect(icon.element.style.color).toEqual(<span class="string">'rgb(255, 255, 255)'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li>检测方法有没有被调用</li></ol><ul><li>Vue Test Utils</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> checkButton = wrapper.find(<span class="string">'.check-box'</span>);</span><br><span class="line">    checkButton.trigger(<span class="string">'click'</span>);</span><br><span class="line">    expect(wrapper.emitted().input.length).toBe(<span class="number">1</span>);</span><br><span class="line">    expect(wrapper.emitted().input[<span class="number">0</span>]).toBeTruthy();</span><br><span class="line">    expect(wrapper.emitted().input[<span class="number">0</span>]).toEqual([<span class="number">0</span>]);</span><br><span class="line">    expect(checkButton.classes()).toContain(<span class="string">'is-checked'</span>);</span><br><span class="line">    checkButton.trigger(<span class="string">'click'</span>);</span><br><span class="line">    expect(wrapper.emitted().input.length).toBe(<span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>sinon</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> it(<span class="string">'triggle'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> shallowWrapper = wrapper(Header);</span><br><span class="line">    <span class="keyword">const</span> eventSpy = sinon.spy(wrapper.vm, <span class="string">'$emit'</span>);</span><br><span class="line">    wrapper.find(<span class="string">'.gree-header-title'</span>).trigger(<span class="string">'click'</span>);</span><br><span class="line">    expect(eventSpy.withArgs(<span class="string">'on-click-title'</span>).calledOnce).toBeTruthy();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="5"><li>检测传入的数据有没有正常接收<br>挂载组件时传入一组虚拟数据，根据传入的内容和得到的结果验证逻辑处理是否正确：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'The text of check-box should be something, () =&gt; &#123;</span></span><br><span class="line"><span class="string">    const shallowWrapper = shallowMount(box, &#123;</span></span><br><span class="line"><span class="string">      slots: &#123;</span></span><br><span class="line"><span class="string">        default: '</span>something<span class="string">'</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">    expect(shallowWrapper.find('</span>.check-box<span class="string">').text()).toBe('</span>something<span class="string">');</span></span><br><span class="line"><span class="string">    shallowWrapper.destroy();</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br></pre></td></tr></table></figure><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><h3 id="jest"><a href="#jest" class="headerlink" title="jest"></a>jest</h3><ul><li>全局API</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分组</span></span><br><span class="line">descrip(<span class="string">'title'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'test1'</span>, ()=&gt;&#123;</span><br><span class="line">    <span class="comment">// do somthing</span></span><br><span class="line">  &#125;)</span><br><span class="line">  it(<span class="string">'test2'</span>, ()=&gt;&#123;</span><br><span class="line">    <span class="comment">// do somthing</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">beforeEach(fn, timeout) <span class="comment">// 在当前作用域下每次执行前运行</span></span><br><span class="line">afterEach(fn, timeout) <span class="comment">// 在当前作用域下每次执行后运行</span></span><br><span class="line">beforeAll(fn, timeout) <span class="comment">// 全部代码执行前运行</span></span><br><span class="line"><span class="comment">// timeout: ms 终止前等待的时间，默认是5000, 5s到了后即使没有执行完测试用例也会终止</span></span><br><span class="line"><span class="comment">// 使用举例</span></span><br><span class="line">beforeAll(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'global - beforeAll'</span>));</span><br><span class="line">afterAll(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'global - afterAll'</span>));</span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'global - beforeEach'</span>));</span><br><span class="line">afterEach(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'global - afterEach'</span>));</span><br><span class="line">test(<span class="string">''</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'global - test'</span>));</span><br><span class="line">describe(<span class="string">'Scoped / Nested block'</span>, () =&gt; &#123;</span><br><span class="line">  beforeAll(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Scoped - beforeAll'</span>));</span><br><span class="line">  afterAll(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Scoped - afterAll'</span>));</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Scoped - beforeEach'</span>));</span><br><span class="line">  afterEach(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Scoped - afterEach'</span>));</span><br><span class="line">  test(<span class="string">''</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'Scoped - test'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行顺序</span></span><br><span class="line"><span class="comment">// global - beforeAll</span></span><br><span class="line"><span class="comment">// global - beforeEach</span></span><br><span class="line"><span class="comment">// global - test</span></span><br><span class="line"><span class="comment">// global - afterEach</span></span><br><span class="line"><span class="comment">// Scoped - beforeAll</span></span><br><span class="line"><span class="comment">// global - beforeEach</span></span><br><span class="line"><span class="comment">// Scoped - beforeEach</span></span><br><span class="line"><span class="comment">// Scoped - test</span></span><br><span class="line"><span class="comment">// Scoped - afterEach</span></span><br><span class="line"><span class="comment">// global - afterEach</span></span><br><span class="line"><span class="comment">// Scoped - afterAll</span></span><br><span class="line"><span class="comment">// global - afterAll</span></span><br><span class="line"></span><br><span class="line">describe(name, fn) <span class="comment">// 创建一个测试用例的分组</span></span><br><span class="line">test(name, fn, timeout) <span class="comment">// 测试用例</span></span><br><span class="line">it(name, fn, timeout) <span class="comment">// 测试用例</span></span><br><span class="line">test.each(table)(name, fn, timeout) <span class="comment">// 当一个测试用例需要执行多次，但是每次仅仅是参数不同时用这个</span></span><br><span class="line"><span class="comment">// e.g.</span></span><br><span class="line">test.each([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>]])(</span><br><span class="line">  <span class="string">'.add(%i, %i)'</span>,</span><br><span class="line">  (a, b, expected) =&gt; &#123;</span><br><span class="line">    expect(a + b).toBe(expected);</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>断言</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">expect(fn()).toBe(value) <span class="comment">// 断言fn的执行结果是value</span></span><br><span class="line">expect.extend(matchers) <span class="comment">// 自定义断言</span></span><br><span class="line"><span class="comment">// e.g.</span></span><br><span class="line">expect.extend(&#123;</span><br><span class="line">  matchers() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">it(<span class="string">'numeric ranges'</span>, () =&gt; &#123;</span><br><span class="line">  expect(<span class="number">100</span>).matchers().toBe(<span class="literal">true</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">expect().toBeTruthy() <span class="comment">// 结果为真</span></span><br><span class="line">expect().toEqual() <span class="comment">// 递归比较对象实例的所有属性（也称为“深度”相等）。</span></span><br></pre></td></tr></table></figure><ul><li>mock</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jest.fn() <span class="comment">// 提供一个虚拟方法</span></span><br><span class="line"><span class="comment">// e.g.</span></span><br><span class="line"><span class="keyword">const</span> returnsTrue = jest.fn(<span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">true</span>);</span><br><span class="line">returnsTrue();</span><br><span class="line"><span class="built_in">console</span>.log(returnsTrue()); <span class="comment">// true;</span></span><br><span class="line">expect(returnsTrue).toHaveBeenCalled();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">jest.mock(moduleName, factory, options) <span class="comment">// 在需要时模拟一个模块。factory和options是可选的。比如测试路由时可以mock所需的路由模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 举例：</span></span><br><span class="line"><span class="comment">// sum.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">88</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = sum;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sum.test.js</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="built_in">require</span>(<span class="string">'./sum.js'</span>);</span><br><span class="line">jest.mock(<span class="string">'./sum.js'</span>, () =&gt; jest.fn(<span class="function"><span class="params">()</span> =&gt;</span> <span class="number">66</span>));</span><br><span class="line">describe(<span class="string">'sum'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'sum should return 66'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(sum()); <span class="comment">// 66，这里的sum()是mock的假方法</span></span><br><span class="line">    expect(sum()).toBe(<span class="number">66</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p>&emsp;&emsp;vscode有jest插件，安装后可以快速开启debug。debug环境是在node下的，也可以自己配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">  <span class="attr">"configurations"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"node"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"vscode-jest-tests"</span>,</span><br><span class="line">      <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">      <span class="attr">"args"</span>: [</span><br><span class="line">        <span class="string">"--runInBand"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span>,</span><br><span class="line">      <span class="attr">"console"</span>: <span class="string">"integratedTerminal"</span>,</span><br><span class="line">      <span class="attr">"internalConsoleOptions"</span>: <span class="string">"neverOpen"</span>,</span><br><span class="line">      <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/node_modules/jest/bin/jest"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置好后设置断点，按F5即可。</p><p><img src="https://raw.githubusercontent.com/wz71014q/img/master/jest/jestdebug.png" alt="snapshot"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;为了提高代码设计水平，测试是必不可少的。&lt;a href=&quot;https://jestjs.io/zh-Hans/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jest&lt;/a&gt;是facebook出的一个测试框架，里面自带断言库，而且VUE有个&lt;a href=&quot;https://vue-test-utils.vuejs.org/zh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vue Test Utils&lt;/a&gt;提供了官方支持，因此这里使用jest构建VUE单元测试部分。开始前建议先浏览一下官方网站，进行初步了解。&lt;/p&gt;
&lt;h2 id=&quot;起步&quot;&gt;&lt;a href=&quot;#起步&quot; class=&quot;headerlink&quot; title=&quot;起步&quot;&gt;&lt;/a&gt;起步&lt;/h2&gt;&lt;h3 id=&quot;安装-amp-简易demo&quot;&gt;&lt;a href=&quot;#安装-amp-简易demo&quot; class=&quot;headerlink&quot; title=&quot;安装&amp;amp;简易demo&quot;&gt;&lt;/a&gt;安装&amp;amp;简易demo&lt;/h3&gt;&lt;p&gt;新建一个文件夹，然后执行：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install jest -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这就安装好了，接下来写一个简单的函数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wz71014q/img/master/jest/jestSimpleDemo.png&quot; alt=&quot;jestSimpleDemo&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后在你的项目文件夹下执行jest, 就会自动搜索所有.test.js和.spec.js文件进行测试。&lt;/p&gt;
&lt;h3 id=&quot;增加配置&quot;&gt;&lt;a href=&quot;#增加配置&quot; class=&quot;headerlink&quot; title=&quot;增加配置&quot;&gt;&lt;/a&gt;增加配置&lt;/h3&gt;&lt;p&gt;接着我们改一下目录，增加一个SRC文件夹，里面放着我们的原文件，然后新建test文件夹，将测试文件全部放进去&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wz71014q/img/master/jest/jestES6Demo.png&quot; alt=&quot;jestES6Demo&quot;&gt;&lt;br&gt;在demo.test.js中添加代码：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// demo.test.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; checkNumber &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;../src/demo/demo&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;describe(&lt;span class=&quot;string&quot;&gt;&#39;decribe用来生成一个组&#39;&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  test(&lt;span class=&quot;string&quot;&gt;&#39;checkNumber&#39;&lt;/span&gt;, ()=&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    expect(checkNumber(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)).toBe(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JS" scheme="https://github.com/wz71014q/categories/JS/"/>
    
      <category term="Vue" scheme="https://github.com/wz71014q/categories/Vue/"/>
    
      <category term="jest" scheme="https://github.com/wz71014q/categories/jest/"/>
    
      <category term="单元测试" scheme="https://github.com/wz71014q/categories/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="JS" scheme="https://github.com/wz71014q/tags/JS/"/>
    
      <category term="Vue" scheme="https://github.com/wz71014q/tags/Vue/"/>
    
      <category term="jest" scheme="https://github.com/wz71014q/tags/jest/"/>
    
      <category term="单元测试" scheme="https://github.com/wz71014q/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>CSS-设备像素与逻辑像素</title>
    <link href="https://github.com/wz71014q/2019/06/04/CSS-%E8%AE%BE%E5%A4%87%E5%83%8F%E7%B4%A0%E4%B8%8E%E9%80%BB%E8%BE%91%E5%83%8F%E7%B4%A0/"/>
    <id>https://github.com/wz71014q/2019/06/04/CSS-设备像素与逻辑像素/</id>
    <published>2019-06-04T13:00:00.000Z</published>
    <updated>2019-09-26T03:31:07.507Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;前端适配是个麻烦事。PC端要适配不同浏览器，移动端又要适配各种屏幕。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;前端适配是个麻烦事。PC端要适配不同浏览器，移动端又要适配各种屏幕。&lt;/p&gt;

      
    
    </summary>
    
      <category term="CSS" scheme="https://github.com/wz71014q/categories/CSS/"/>
    
      <category term="屏幕适配" scheme="https://github.com/wz71014q/categories/%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D/"/>
    
    
      <category term="CSS" scheme="https://github.com/wz71014q/tags/CSS/"/>
    
      <category term="屏幕适配" scheme="https://github.com/wz71014q/tags/%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>互斥锁</title>
    <link href="https://github.com/wz71014q/2019/05/23/%E4%BA%92%E6%96%A5%E9%94%81/"/>
    <id>https://github.com/wz71014q/2019/05/23/互斥锁/</id>
    <published>2019-05-23T12:00:00.000Z</published>
    <updated>2019-09-26T03:31:07.516Z</updated>
    
    <content type="html"><![CDATA[<p>多线程语言容易发生的一个问题是线程之间状态不同步。比如有两个线程A和B，A线程要对一个资源进行删除操作，B线程要对一个资源进行修改操作，这时候两个线程容易发生冲突。JS是单线程语言，貌似不会发送这种情况，但是真的如此吗？请看下面这个情况，这是在处理公司业务时碰到的，具体代码无法透漏：<br><img src="https://raw.githubusercontent.com/wz71014q/img/master/lock/lock.png" alt="lock"><br>本地状态需要跟服务器状态同步，并且采取轮询策略。同时本地又是可以一直操作的，所以如果网络延迟就会产生图中的情况，本地数据会一直跳变。<br>这时可以借用多线程之间互斥锁的思想，将过程简化如下：<br><img src="https://raw.githubusercontent.com/wz71014q/img/master/lock/simplify.png" alt="lock"><br>简化之后，就发现本地操作和服务端操作两个线程要对UI这个资源同时进行操作，所以需要加个互斥锁，本地操作时禁止服务端进行操作，本地操作完成并且收到服务端的回调才解锁。</p><p>总结：多线程事件如框架组件内部数据更新、git协作开发等合作事件，最重要的是找出共享资源，理清楚操作方和他们之间的关系，再进行工作协调，保证每次只有一方在操作共享资源，保证所有状态同步。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;多线程语言容易发生的一个问题是线程之间状态不同步。比如有两个线程A和B，A线程要对一个资源进行删除操作，B线程要对一个资源进行修改操作，这时候两个线程容易发生冲突。JS是单线程语言，貌似不会发送这种情况，但是真的如此吗？请看下面这个情况，这是在处理公司业务时碰到的，具体代码
      
    
    </summary>
    
      <category term="JS" scheme="https://github.com/wz71014q/categories/JS/"/>
    
      <category term="个人笔记" scheme="https://github.com/wz71014q/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JS" scheme="https://github.com/wz71014q/tags/JS/"/>
    
      <category term="个人笔记" scheme="https://github.com/wz71014q/tags/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>js基础之异步编程解决方案</title>
    <link href="https://github.com/wz71014q/2019/05/23/js%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://github.com/wz71014q/2019/05/23/js基础之异步编程解决方案/</id>
    <published>2019-05-23T12:00:00.000Z</published>
    <updated>2019-09-26T03:31:07.513Z</updated>
    
    <content type="html"><![CDATA[<p>异步编程是JS中必备的一部分。由于JS是单线程，如果全部事件都顺序执行会阻塞进程。所以一些耗时较长的事件采用异步方式进行。这里记录一些《深入浅出Node.js》笔记，有些地方没有碰到过，不理解，后续完善。</p><h2 id="异步编程的一些问题："><a href="#异步编程的一些问题：" class="headerlink" title="异步编程的一些问题："></a>异步编程的一些问题：</h2><ol><li>异常处理<br>一般，使用try/catch/finally来进行错误处理<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="built_in">JSON</span>.parse(json);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123; <span class="comment">// 无论是否发生错误，finally都会执行。错误会在最近的catch块中捕获，然后终止</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"finally"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>现在有一个异步方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  process.nextTick(callback);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">async</span>(callback);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里调用async()方法只能捕获async方法的异常，但是回调callback的异常却无法捕获<br><a id="more"></a></p><ol start="2"><li><p>函数嵌套太深</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">connection.query(sql, (err, result) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.err(err)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    connection.query(sql, (err, result) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span>(err) &#123;</span><br><span class="line">          <span class="built_in">console</span>.err(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>阻塞代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这段代码虽然可以阻塞进程，但会持续占用CPU进行判断，性能不佳</span></span><br><span class="line"><span class="keyword">const</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">new</span> <span class="built_in">Date</span>() - start &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">  ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多线程编程</p></li><li>异步转同步</li></ol><h2 id="异步编程解决方案"><a href="#异步编程解决方案" class="headerlink" title="异步编程解决方案"></a>异步编程解决方案</h2><h3 id="事件发布-订阅模式"><a href="#事件发布-订阅模式" class="headerlink" title="事件发布/订阅模式"></a>事件发布/订阅模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听</span></span><br><span class="line">emitter.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 发布</span></span><br><span class="line">emitter.emit(<span class="string">'message'</span>, <span class="string">'I\'m bat man!'</span>);</span><br></pre></td></tr></table></figure><p>事件发布/订阅没有同步、异步的概念，只要一发布、监听者立刻调用。</p><h3 id="Promise-Defeered模式"><a href="#Promise-Defeered模式" class="headerlink" title="Promise/Defeered模式"></a>Promise/Defeered模式</h3><p>Defeered: 延迟对象，暂不处理。</p><p>Promise 对象用于表示一个异步操作的最终状态（完成或失败），以及该异步操作的结果值。它的特点：</p><blockquote><ol><li>Promise对象代表一个异步操作，只有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。</li><li>Promise只会从pending转化到fulfilled或者是rejected，不会逆转。转化成功后就不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。</li></ol></blockquote><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>创建一个Pormise实例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncTime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise start'</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">'time down'</span>)</span><br><span class="line">    &#125;, <span class="number">5000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">asyncTime()</span><br><span class="line"> .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(res);</span><br><span class="line"> &#125;)</span><br><span class="line"> .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.error(error);</span><br><span class="line"> &#125;)</span><br><span class="line"> .finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// finally方法的回调函数不接受任何参数</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'执行完成'</span>);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">promise start</span><br><span class="line"><span class="comment">// 中间间隔5秒</span></span><br><span class="line">time down</span><br></pre></td></tr></table></figure></p><p>Promise实例化后立即执行，输出”promise start”，5秒后执行成功，输出”time down”。</p><p>有几点需要注意：</p><ol><li>resolve将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果作为参数传递出去。reject也可以将Promise对象的状态结束，但是是变成“失败”（即从 pending 变为 rejected)。</li><li>then方法的第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。一般then只用来接收resolve状态。rejected状态由catch捕获执行。</li><li>resolve()、reject()、then()和cacth()方法的返回值都是新的Promise对象。所以可以在后面接着使用then/catch，链式调用。</li><li>立即resolve()的 Promise 对象，是在本轮“事件循环”（event loop）的结束时执行，而不是在下一轮“事件循环”的开始时。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'three'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'two'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'one'</span>);</span><br><span class="line"><span class="comment">// one</span></span><br><span class="line"><span class="comment">// two</span></span><br><span class="line"><span class="comment">// three</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">doSomething()</span><br><span class="line">.then(<span class="function"><span class="params">result</span> =&gt;</span> doSomethingElse(value))</span><br><span class="line">.then(<span class="function"><span class="params">newResult</span> =&gt;</span> doThirdThing(newResult))</span><br><span class="line">.then(<span class="function"><span class="params">finalResult</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Got the final result: <span class="subst">$&#123;finalResult&#125;</span>`</span>))</span><br><span class="line">.catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;<span class="built_in">console</span>.error(err)&#125;);</span><br></pre></td></tr></table></figure><p>通常，一遇到异常抛出，promise链就会停下来，直接调用链式中的catch处理程序。</p><h4 id="单独使用Promise-resolve-和Promise-reject"><a href="#单独使用Promise-resolve-和Promise-reject" class="headerlink" title="单独使用Promise.resolve()和Promise.reject()"></a>单独使用Promise.resolve()和Promise.reject()</h4><p>Promise.resolve() 和 Promise.reject() 是手动创建一个已经resolve或者reject的promise快捷方法。以Promise.resolve()为例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'foo'</span>)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">'foo'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><ol><li>如果Promise.resolve()参数是一个Promise对象，则不做任何修改，直接返回；</li><li>如果Promise.resolve()参数是一个不具有then方法的对象或根本就不是对象的参数，返回一个resolve状态的Promise对象</li><li>如果Promise.resolve()不带参数，返回一个resolve状态的Promise对象</li><li>Promise.reject()返回reject状态的Promise对象</li></ol><h4 id="Primse-all-和Promise-race"><a href="#Primse-all-和Promise-race" class="headerlink" title="Primse.all()和Promise.race()"></a>Primse.all()和Promise.race()</h4><p>Promise.all()方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure></p><blockquote><p>上面代码中，Promise.all方法接受一个数组作为参数，p1、p2、p3都是 Promise 实例，如果不是，就会先调用Promise.resolve方法，将参数转为 Promise 实&gt;例。p的状态由p1、p2、p3决定，分成两种情况：</p><ol><li>只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</li><li>只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</li></ol></blockquote><p>Promise.race()方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.race([p1, p2, p3]);</span><br></pre></td></tr></table></figure></p><blockquote><p>上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。</p></blockquote><h4 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h4><p>async函数跟Promise可以搭配使用。async函数有返回值时会返回一个Promise，后面可以跟then方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本用法，start → timer middle → (timer then) → end</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'start'</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> timer();</span><br><span class="line">    <span class="comment">// await timer().then(() =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//   console.log('timer then');</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'end'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'timer middle'</span>);</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示范，新建Promise会立即运行，而且没有返回一个Promise对象，await后面要么跟一个Promise对象(或有then方法的对象)要么跟个常量，</span></span><br><span class="line"><span class="comment">// 这里timer()先执行，后面再执行test()时会报错：timer is not a function。</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'start'</span>);</span><br><span class="line">  <span class="keyword">await</span> timer();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'end'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> timer = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'timer start'</span>);</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'middle'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">test();</span><br></pre></td></tr></table></figure><h3 id="异步的并发限制和超时控制"><a href="#异步的并发限制和超时控制" class="headerlink" title="异步的并发限制和超时控制"></a>异步的并发限制和超时控制</h3><p>异步解决方案成熟的第三方库有async、Step等。</p><ul><li>Node中的异步调用有时需要控制并发数量，防止底层系统的性能出问题，一种思路是创建一个队列，每个异步调用顺序存入。设定最大并发数，如果当前活跃的异步调用数量小于最大并发数，直接取出执行，如果大于最大数量，则暂存在队列中，顺序取出调用。</li><li>超时控制可以给异步调用设置一个时间阈值，如果异步调用没有在规定时间内完成，则提示超时。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>《深入浅出Node.js》<br><a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">ECMAScript6入门——Promise对象</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;异步编程是JS中必备的一部分。由于JS是单线程，如果全部事件都顺序执行会阻塞进程。所以一些耗时较长的事件采用异步方式进行。这里记录一些《深入浅出Node.js》笔记，有些地方没有碰到过，不理解，后续完善。&lt;/p&gt;
&lt;h2 id=&quot;异步编程的一些问题：&quot;&gt;&lt;a href=&quot;#异步编程的一些问题：&quot; class=&quot;headerlink&quot; title=&quot;异步编程的一些问题：&quot;&gt;&lt;/a&gt;异步编程的一些问题：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;异常处理&lt;br&gt;一般，使用try/catch/finally来进行错误处理&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(json);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 无论是否发生错误，finally都会执行。错误会在最近的catch块中捕获，然后终止&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;finally&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在有一个异步方法：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;callback&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  process.nextTick(callback);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt;(callback);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里调用async()方法只能捕获async方法的异常，但是回调callback的异常却无法捕获&lt;br&gt;
    
    </summary>
    
      <category term="JS" scheme="https://github.com/wz71014q/categories/JS/"/>
    
    
      <category term="JS" scheme="https://github.com/wz71014q/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>js基础之继承</title>
    <link href="https://github.com/wz71014q/2019/05/09/js%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BB%A7%E6%89%BF/"/>
    <id>https://github.com/wz71014q/2019/05/09/js基础之继承/</id>
    <published>2019-05-09T12:00:00.000Z</published>
    <updated>2019-09-26T03:31:07.514Z</updated>
    
    <content type="html"><![CDATA[<p>《JS高级程序设计》中说JS的继承有原型链、构造函数、组合式、原型式、寄生式、寄生组合式继承，加上ES6的class继承，一共有7种方式。前6种最关键的是搞清楚构造函数、原型对象、原型链的关系，其他模式都是这些的组合。</p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>构造函数也是函数，跟普通函数的没什么区别，但是可以用new()方法创建实例</p><p>e.g.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name, legCount</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.legCount = legCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> Animal(<span class="string">'Tom'</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure></p><h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><p>每个函数都有一个prototype属性（对象没有这个属性），指向一个原型对象，即Animal.prototype( 这玩意是个对象，名字就叫Animal.prototye )</p><p>Animal.prototype默认有个constructor属性，这个对象的constructor属性指向该对象对应的构造函数，即Animal()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Animal.prototype);</span><br><span class="line"><span class="comment">// 结果：</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">constructor</span>: ƒ Animal(name ,leg),</span><br><span class="line">  __proto__: Object  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>注意：Animal()函数内部定义了name、age属性，但是Animal.prototype对象是没有这些属性的，只有默认的constructor属性，除非在原型上定义其他属性: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Animal.prototype.speak = <span class="string">'miao'</span></span><br><span class="line"><span class="built_in">console</span>.log(Animal.prototype);</span><br><span class="line"><span class="comment">// 结果：</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">constructor</span>: ƒ Animal(name ,leg),</span><br><span class="line">  speak: 'miao',</span><br><span class="line">  __proto__: Object</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时创建一个Animal实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Animal(<span class="string">'light'</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>dog对象有一个[[prototype]]属性，指向该实例对象的原型对象，[[prototype]]可以用__proto__访问，即dog.__proto__ = Animal.prototype</p><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>没有class之前，生成实例都是用构造函数, es6中引入了class概念，可以像C++等直接用class关键字来定义类<br>e.g.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  species = <span class="string">'bird'</span>; <span class="comment">// 这跟定义在this上(写在constructor内)是一样的效果</span></span><br><span class="line">  <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name; <span class="comment">//  类内部的this指向该类的实例</span></span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.Height = <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  speak() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">', speak'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> voice() &#123; <span class="comment">// Animal类自身的静态方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'this is my voice'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> height() &#123; <span class="comment">// getter方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.Height * <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> height(val) &#123; <span class="comment">// setter方法</span></span><br><span class="line">    <span class="keyword">this</span>.Height += val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> Animal(<span class="string">'Tom'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(cat, cat.speak(), Animal.voice());</span><br><span class="line"><span class="comment">// cat是: </span></span><br><span class="line">Animal &#123;</span><br><span class="line">  name: <span class="string">'Tom'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  Height: <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">cat.__proto__= &#123;</span><br><span class="line">  <span class="keyword">constructor</span>:  f Aniaml(name, age),</span><br><span class="line">  speak: f speak() &#123;&#125;,</span><br><span class="line">  height: <span class="number">300</span>,</span><br><span class="line">  <span class="keyword">get</span> height: f() &#123;&#125;,</span><br><span class="line">  <span class="keyword">set</span> height: f(val) &#123;&#125;,</span><br><span class="line">  __proto__: <span class="built_in">Object</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="构造函数式继承"><a href="#构造函数式继承" class="headerlink" title="构造函数式继承"></a>构造函数式继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.hand = <span class="string">'hand'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> tom = <span class="keyword">new</span> Child(<span class="string">'Tom'</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">// tom是Child的实例，但是“借用了”Person的构造函数，生成的实例就包含了Person的属性</span></span><br><span class="line">&#123;</span><br><span class="line">  name = <span class="string">'Tom'</span>;</span><br><span class="line">  age = <span class="number">10</span>;</span><br><span class="line">  hand = <span class="string">'hand'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原型链式继承"><a href="#原型链式继承" class="headerlink" title="原型链式继承"></a>原型链式继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.action = <span class="string">'move'</span>;</span><br><span class="line">  <span class="keyword">this</span>.speak = <span class="string">'speak'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.hasLeg = <span class="string">'true'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'cat'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Cat.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line">Cat.prototype.height = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tom = <span class="keyword">new</span> Cat();</span><br><span class="line"></span><br><span class="line"><span class="comment">// tom</span></span><br><span class="line">&#123;</span><br><span class="line">  name: <span class="string">'cat'</span>,</span><br><span class="line">  __proto__: Animal <span class="comment">// 这里的Animal不是Animal构造函数，而是Cat的原型对象。因为Cat.prototype = new Animal();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// tom.__proto__指向tom的原型对象，就是Cat.prototype</span></span><br><span class="line">&#123;</span><br><span class="line">  action: <span class="string">"move"</span>,</span><br><span class="line">  height: <span class="number">50</span>,</span><br><span class="line">  speak: <span class="string">"speak"</span>,</span><br><span class="line">  __proto__: <span class="built_in">Object</span> <span class="comment">// 这里的Object是Animal.prototype</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// tom.__proto__.__proto__指向tom原型对象的原型对象，就是Animal.prototype</span></span><br><span class="line">&#123;</span><br><span class="line">  hasleg: <span class="string">'true'</span>,</span><br><span class="line">  <span class="keyword">constructor</span>: ƒ Animal(),</span><br><span class="line">  __proto__: Object // 这里的Object是原型Object</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="class继承"><a href="#class继承" class="headerlink" title="class继承"></a>class继承</h2><p>class的继承有专门的语法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  speak = <span class="string">'bar'</span>;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'Animal'</span>; <span class="comment">//  类内部的this指向该类的实例</span></span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">this</span>.Height = <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(...args) &#123;</span><br><span class="line">    <span class="keyword">super</span>(...args); <span class="comment">// super(...args)相当于Animal.prototype.constructor.call(this, ...args)</span></span><br><span class="line">    <span class="keyword">this</span>.speak = <span class="string">'bar'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  dogSpeak() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.speak(); <span class="comment">// 调用父类的speak()方法，相当于dogSpeak() = Animal.prototype.speak()，并且内部的this指向当前调用的实例</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dog);</span><br><span class="line"><span class="comment">// Dog &#123;speak: "bar", name: "Animal", age: 15, Height: 100&#125;</span></span><br><span class="line"><span class="comment">//    Height: 100</span></span><br><span class="line"><span class="comment">//    age: 15</span></span><br><span class="line"><span class="comment">//    name: "Animal"</span></span><br><span class="line"><span class="comment">//    speak: "bar"</span></span><br><span class="line"><span class="comment">//    __proto__: Animal</span></span><br></pre></td></tr></table></figure></p><p>class的继承是将父类实例对象的属性和方法，加到this上面（所以必须先调用super方法），然后再用子类的构造函数修改this。也就是只有先调用super，才能够使用this.<br>注意：super<br>        当方法super()使用时，会继承父类的构造函数，只能在子类的构造函数中使用；<br>        当对象super.XXX使用时，指向父类的原型对象Animal.prototype;<br>        如果super作为对象，用在静态方法之中，这时super将指向父类;<br>        在子类的静态方法中通过super调用父类的方法时，方法内部的this指向当前的子类，而不是子类的实例</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">《ECMAScript 6入门》– 阮一峰</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《JS高级程序设计》中说JS的继承有原型链、构造函数、组合式、原型式、寄生式、寄生组合式继承，加上ES6的class继承，一共有7种方式。前6种最关键的是搞清楚构造函数、原型对象、原型链的关系，其他模式都是这些的组合。&lt;/p&gt;
&lt;h2 id=&quot;构造函数&quot;&gt;&lt;a href=&quot;#构造函数&quot; class=&quot;headerlink&quot; title=&quot;构造函数&quot;&gt;&lt;/a&gt;构造函数&lt;/h2&gt;&lt;p&gt;构造函数也是函数，跟普通函数的没什么区别，但是可以用new()方法创建实例&lt;/p&gt;
&lt;p&gt;e.g.&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Animal&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name, legCount&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.legCount = legCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; cat = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Animal(&lt;span class=&quot;string&quot;&gt;&#39;Tom&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;原型对象&quot;&gt;&lt;a href=&quot;#原型对象&quot; class=&quot;headerlink&quot; title=&quot;原型对象&quot;&gt;&lt;/a&gt;原型对象&lt;/h2&gt;&lt;p&gt;每个函数都有一个prototype属性（对象没有这个属性），指向一个原型对象，即Animal.prototype( 这玩意是个对象，名字就叫Animal.prototye )&lt;/p&gt;
&lt;p&gt;Animal.prototype默认有个constructor属性，这个对象的constructor属性指向该对象对应的构造函数，即Animal()。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(Animal.prototype);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 结果：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;: ƒ Animal(name ,leg),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  __proto__: Object  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JS" scheme="https://github.com/wz71014q/categories/JS/"/>
    
    
      <category term="JS" scheme="https://github.com/wz71014q/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>一套兼容原生、VUE、React热更新的webpack配置</title>
    <link href="https://github.com/wz71014q/2019/05/09/%E4%B8%80%E5%A5%97webpack%E7%83%AD%E6%9B%B4%E6%96%B0%E9%85%8D%E7%BD%AE/"/>
    <id>https://github.com/wz71014q/2019/05/09/一套webpack热更新配置/</id>
    <published>2019-05-09T12:00:00.000Z</published>
    <updated>2019-09-26T03:31:07.516Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>&emsp;&emsp;让我们从头开始。<br>&emsp;&emsp;JS是一门入门很简单的语言，能够给新手很强的自信心，这对学习是很大的帮助。就连写JS的工具都不需要特别复杂，你可以直接在记事本中输入如下部分并保存为index.html，然后在浏览器打开就是一个网页了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.root</span> &#123;</span></span><br><span class="line">        width: 300px;</span><br><span class="line">        height: 300px;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.querySelector(<span class="string">'.root'</span>).style.background = <span class="string">'red'</span>;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;再进一步，就是找一个好用的文本编辑器，将HTML、JS、CSS分离，变得稍微专业一些。然后学习Vue、React、Angular等框架。这时已经可以正常进行项目开发了。<br>&emsp;&emsp;这些框架各自提供了自己的脚手架，让我们可以实时看到自己写的代码产生的效果，但是如果我平时学习，难道也要分开好几个文件夹吗？那太麻烦了，可不可以在一套工程配置里实现兼容几种框架并且全部可以热更新？<br>&emsp;&emsp;当然可以。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>&emsp;&emsp;推荐一篇文章<a href="https://www.jianshu.com/p/42e11515c10f" target="_blank" rel="noopener">https://www.jianshu.com/p/42e11515c10f</a>，笔者入门也是看到这篇文章。写的很好。如果你只想跟着一个人系统的学，那么可以看这里，也很详细！</p><p>&emsp;&emsp;首先创建一个新的文件夹learnPack，进入文件夹，执行初始化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><a id="more"></a><p>安装webpack，这里的版本是webpack4，每个大的版本之间是不能混用的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack -g</span><br><span class="line">npm install webpack -D</span><br><span class="line">npm install webpack-cli -D</span><br></pre></td></tr></table></figure><p>安装好后创建index.html、src/main.js、src/style.css：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&gt;index.html&lt;--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>learn webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./src/style.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&gt;注意这里，并没有创建dist文件夹&lt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">'.root'</span>).innerHTML = <span class="string">'hello webpack'</span>;</span><br><span class="line">&#125;</span><br><span class="line">init();</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-class">.root</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">color</span>: aqua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目录结构如下：<br><img src="https://raw.githubusercontent.com/wz71014q/img/master/webpack/webpack1.png" alt="webpack"></p><p>文件全部创建好后，开始打包！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack已经全局安装过了，所以可以直接执行如下命令</span></span><br><span class="line">webpack src/main.js</span><br></pre></td></tr></table></figure><p>看到这些就说明打包成功了！<br><img src="https://raw.githubusercontent.com/wz71014q/img/master/webpack/webpack2.png" alt="webpack"><br>在目录中也看到了多了个dist文件夹，里面有我们的main.js，打开可以看到里面是处于压缩状态的，而且之前我们已经在index.html中引入了dist/main.js文件，在浏览器打开即可看到“hello webpack!”<br><img src="https://raw.githubusercontent.com/wz71014q/img/master/webpack/webpack3.png" alt="webpack"></p><p>那么，如果我想将打包文件输出至”build”文件夹呢？而且名称改为bundle怎么做？<br>现在，我们先添加一个webpack的配置文件:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// webpack是运行在node环境的，__dirname是node中的一个全局变量，表示当前文件的路径。</span></span><br><span class="line">  <span class="comment">// 比如webppack.config.js在F:\learnPack目录下，则__dirname = F:\learnPack</span></span><br><span class="line">  entry:  __dirname + <span class="string">"/src/main.js"</span>,<span class="comment">//入口文件，告诉webpack从哪里开始分析打包</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + <span class="string">"/build"</span>,<span class="comment">//打包后的文件存放的地方</span></span><br><span class="line">    filename: <span class="string">"bundle.js"</span><span class="comment">//打包后输出文件的文件名</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这些配置，就可以在命令行直接执行webpack，webpack会自动识别这个文件里的配置<br><img src="https://raw.githubusercontent.com/wz71014q/img/master/webpack/webpack4.png" alt="webpack"><br>执行成功！</p><p>webpack中重要的几个概念是entry(入口)、output(输出)、loader（理解为解析器）、plugins(插件)。其中loader和plugins是可选的，我们这个简单的文件当然不需要。接下来搭建本地服务器，在线编辑并预览！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装webpack自带的服务器</span></span><br><span class="line">npm install webpack-dev-server -D</span><br></pre></td></tr></table></figure><p>继续在webpack配置文件中添加服务配置devServer项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">console</span>.log(__dirname);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry:  __dirname + <span class="string">"/src/main.js"</span>,<span class="comment">//入口文件</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + <span class="string">"/build"</span>,<span class="comment">//打包后的文件存放的地方</span></span><br><span class="line">    filename: <span class="string">"bundle.js"</span><span class="comment">//打包后输出文件的文件名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./'</span>, <span class="comment">// 本地服务器所加载的index页面所在的目录</span></span><br><span class="line">    host: <span class="string">'localhost'</span>, <span class="comment">// host</span></span><br><span class="line">    port: <span class="string">'8080'</span>, <span class="comment">// 端口</span></span><br><span class="line">    historyApiFallback: <span class="literal">true</span>, <span class="comment">// 不跳转</span></span><br><span class="line">    inline: <span class="literal">true</span>, <span class="comment">// 实时刷新</span></span><br><span class="line">    clientLogLevel: <span class="string">'none'</span>,</span><br><span class="line">    compress: <span class="literal">true</span>, <span class="comment">// 一切服务都启用 gzip 压缩</span></span><br><span class="line">    hot: <span class="literal">true</span>, <span class="comment">// 启用 webpack 的模块热替换特性</span></span><br><span class="line">    hotOnly: <span class="literal">true</span>,</span><br><span class="line">    noInfo: <span class="literal">true</span>, <span class="comment">// 不显示打包压缩的信息</span></span><br><span class="line">    index: <span class="string">'index.html'</span>, <span class="comment">// 模版页名称</span></span><br><span class="line">    progress: <span class="literal">true</span>, <span class="comment">// 运行进度条</span></span><br><span class="line">    watchContentBase: <span class="literal">false</span>, <span class="comment">// 观察 devServer.contentBase 下的文件。文件修改后，会触发一次完整的页面重载</span></span><br><span class="line">    open: <span class="literal">true</span> <span class="comment">// 是否自动打开浏览器</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&gt;index.html&lt;--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>learn webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./src/style.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&gt;注意修改这里，启动本地服务后会自动匹配&lt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在package.json的scripts中添加start和buld指令：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"learnpack"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"main.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"webpack-dev-server"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^4.33.0"</span>,</span><br><span class="line">    <span class="attr">"webpack-cli"</span>: <span class="string">"^3.3.4"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^3.7.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行npm start 就可以在浏览器端 <a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a> 看到运行结果啦!</p><p>在清楚了基础操作后建议将<a href="https://www.webpackjs.com" target="_blank" rel="noopener">官方网站</a>浏览一遍</p><h2 id="热更新配置"><a href="#热更新配置" class="headerlink" title="热更新配置"></a>热更新配置</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;让我们从头开始。&lt;br&gt;&amp;emsp;&amp;emsp;JS是一门入门很简单的语言，能够给新手很强的自信心，这对学习是很大的帮助。就连写JS的工具都不需要特别复杂，你可以直接在记事本中输入如下部分并保存为index.html，然后在浏览器打开就是一个网页了。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;      &lt;span class=&quot;selector-class&quot;&gt;.root&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        width: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;root&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;.root&#39;&lt;/span&gt;).style.background = &lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;再进一步，就是找一个好用的文本编辑器，将HTML、JS、CSS分离，变得稍微专业一些。然后学习Vue、React、Angular等框架。这时已经可以正常进行项目开发了。&lt;br&gt;&amp;emsp;&amp;emsp;这些框架各自提供了自己的脚手架，让我们可以实时看到自己写的代码产生的效果，但是如果我平时学习，难道也要分开好几个文件夹吗？那太麻烦了，可不可以在一套工程配置里实现兼容几种框架并且全部可以热更新？&lt;br&gt;&amp;emsp;&amp;emsp;当然可以。&lt;/p&gt;
&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;推荐一篇文章&lt;a href=&quot;https://www.jianshu.com/p/42e11515c10f&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/42e11515c10f&lt;/a&gt;，笔者入门也是看到这篇文章。写的很好。如果你只想跟着一个人系统的学，那么可以看这里，也很详细！&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;首先创建一个新的文件夹learnPack，进入文件夹，执行初始化&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JS" scheme="https://github.com/wz71014q/categories/JS/"/>
    
    
      <category term="JS" scheme="https://github.com/wz71014q/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>js基础之防抖与节流</title>
    <link href="https://github.com/wz71014q/2019/05/06/js%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/"/>
    <id>https://github.com/wz71014q/2019/05/06/js基础之防抖与节流/</id>
    <published>2019-05-06T12:00:00.000Z</published>
    <updated>2019-09-26T03:31:07.514Z</updated>
    
    <content type="html"><![CDATA[<p>假如一个函数要在很短的时间内执行很多次，而且这个函数比较复杂，那么它对我们的程序性能就会造成很大的影响。解决这种问题的办法有两种：  </p><ul><li>一种就是每隔一段时间执行一次，减少函数的执行次数。这就是<font color="red">节流</font></li><li>另一种思路是既然短时间内执行了多次，那我只取最后一次的结果就行了。这就是<font color="red">防抖</font></li></ul><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p>实现方法：时间戳、定时器</p><ol><li>时间戳</li></ol><p>记录每次执行函数时的时间，减去上次执行的时间，如果间隔小于预定的时间间隔就不执行。如下，设置初始时间为0，则第一次会触发, 后面每次执行进行判断，大于设定时间再执行，这样就可以防止多次执行复杂函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @function throttle</span></span><br><span class="line"><span class="comment"> * @description 节流方法,使用时间戳实现，第一次会触发，最后离开触发范围不会触发</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; fn</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; fn</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; wait</span></span><br><span class="line"><span class="comment"> * @returns</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttleTime</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> preTime = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> nowTime = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">if</span> (nowTime - preTime &gt; wait) &#123;</span><br><span class="line">      fn.apply(context, args);</span><br><span class="line">      preTime = nowTime;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><ol start="2"><li>定时器</li></ol><p>使用setTimeout定时器定时执行函数，setTimeout到达指定时间后一定会执行，所以就算此时没有再次触发函数，也会执行一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @function throttleTimer</span></span><br><span class="line"><span class="comment"> * @description 节流方法，使用定时器实现。第一次不触发，最后离开触发范围也会触发</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; fn</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; wait</span></span><br><span class="line"><span class="comment"> * @returns</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttleTimer</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> waitTimer = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (!waitTimer) &#123;</span><br><span class="line">      waitTimer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        fn.apply(context, args);</span><br><span class="line">        clearTimeout(waitTimer);</span><br><span class="line">        waitTimer = <span class="literal">null</span>;</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>合并两种情况</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @function merge</span></span><br><span class="line"><span class="comment"> * @description 节流方法，以上两种方法的合体</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; fn</span></span><br><span class="line"><span class="comment"> * @param &#123;Number&#125; wait</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; options 设置第一次是否触发，以及离开范围后是否触发</span></span><br><span class="line"><span class="comment"> * @returns</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">fn, wait, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> preTime = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> waitTimer = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> throttle = <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> nowTime = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">if</span> (nowTime - preTime &gt; wait &amp;&amp; options.leading) &#123;</span><br><span class="line">      fn.apply(context, args);</span><br><span class="line">      preTime = nowTime;</span><br><span class="line">      clearTimeout(waitTimer);</span><br><span class="line">      waitTimer = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!waitTimer &amp;&amp; options.traling) &#123;</span><br><span class="line">      waitTimer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        fn.apply(context, args);</span><br><span class="line">        clearTimeout(waitTimer);</span><br><span class="line">        waitTimer = <span class="literal">null</span>;</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  throttle.cancel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(waitTimer);</span><br><span class="line">    waitTimer = <span class="literal">null</span>;</span><br><span class="line">    preTime = <span class="number">0</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> throttle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用举例：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rect = <span class="built_in">document</span>.querySelector(<span class="string">'.rect'</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @function count</span></span><br><span class="line"><span class="comment"> * @description 原始方法，未加节流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  rect.innerHTML = <span class="built_in">parseInt</span>(rect.innerHTML, <span class="number">10</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">rect.addEventListener(<span class="string">'mousemove'</span>, merge(count, <span class="number">1000</span>, &#123; <span class="attr">leading</span>: <span class="literal">true</span>, <span class="attr">traling</span>: <span class="literal">true</span> &#125;), <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wz71014q/img/master/throttle.gif" alt="throttle"></p><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p>防抖可以在每次执行时启动一个延时定时器，下次再执行该函数时清除上一次的延时定时器，再开启一个新的定时器。直到最后一次没有开启新的定时器才会执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @function debounce</span></span><br><span class="line"><span class="comment"> * @description 防抖方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, countVal, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> waitTime = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(fn);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="keyword">this</span>;</span><br><span class="line">    clearTimeout(waitTime);</span><br><span class="line">    waitTime = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      fn.apply(context, [...args, countVal]);</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>debounce可以实现防抖，但是第一次不会执行，现在加个选择项，第一次可以执行，接下来再进行判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @function debounceIm</span></span><br><span class="line"><span class="comment"> * @description 防抖方法</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; fn 执行方法</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; wait 等待时间</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; immediate 如果为true，则第一次执行，然后停止wait秒后再次执行</span></span><br><span class="line"><span class="comment"> * @returns debounced</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounceIm</span>(<span class="params">fn, countVal, wait, immediate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> waitTime = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> debounced = <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (waitTime) &#123;</span><br><span class="line">      clearTimeout(waitTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="keyword">let</span> callnow = !waitTime;</span><br><span class="line">      waitTime = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        waitTime = <span class="literal">null</span>;</span><br><span class="line">      &#125;, wait);</span><br><span class="line">      <span class="keyword">if</span> (callnow) &#123;</span><br><span class="line">        result = fn.apply(context, [...args, countVal]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      waitTime = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        fn.apply(context, [...args, countVal]);</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">  debounced.cancel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(waitTime);</span><br><span class="line">    waitTime = <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> debounced;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wz71014q/img/master/debounce.gif" alt="throttle"></p><h2 id="Vue中使用注意事项"><a href="#Vue中使用注意事项" class="headerlink" title="Vue中使用注意事项"></a>Vue中使用注意事项</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例：</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div @touchmove=<span class="string">"getData"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> debounce <span class="keyword">from</span> <span class="string">'../../utils/debounce.js'</span>;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  getData() &#123;</span><br><span class="line">    debounce(fn, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误原因：这里的debounce返回的是一个方法, methods中的getData执行之后得到了debounce方法返回的debounced方法，但是没有执行，需要改成下面这种形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例：</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div @touchmove=<span class="string">"getData"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> debounce <span class="keyword">from</span> <span class="string">'../../utils/debounce.js'</span>;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  getData: debounce(fn, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://github.com/mqyqingfeng/Blog/issues/22">JavaScript专题之跟着underscore学防抖</a><br><a href="https://github.com/mqyqingfeng/Blog/issues/26">JavaScript专题之跟着 underscore 学节流</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假如一个函数要在很短的时间内执行很多次，而且这个函数比较复杂，那么它对我们的程序性能就会造成很大的影响。解决这种问题的办法有两种：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一种就是每隔一段时间执行一次，减少函数的执行次数。这就是&lt;font color=&quot;red&quot;&gt;节流&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;另一种思路是既然短时间内执行了多次，那我只取最后一次的结果就行了。这就是&lt;font color=&quot;red&quot;&gt;防抖&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;节流&quot;&gt;&lt;a href=&quot;#节流&quot; class=&quot;headerlink&quot; title=&quot;节流&quot;&gt;&lt;/a&gt;节流&lt;/h2&gt;&lt;p&gt;实现方法：时间戳、定时器&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;时间戳&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;记录每次执行函数时的时间，减去上次执行的时间，如果间隔小于预定的时间间隔就不执行。如下，设置初始时间为0，则第一次会触发, 后面每次执行进行判断，大于设定时间再执行，这样就可以防止多次执行复杂函数。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @function throttle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @description 节流方法,使用时间戳实现，第一次会触发，最后离开触发范围不会触发&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param &amp;#123;any&amp;#125; fn&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param &amp;#123;any&amp;#125; fn&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param &amp;#123;any&amp;#125; wait&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @returns&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;throttleTime&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fn, wait&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; preTime = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;...args&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; context = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; nowTime = +&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (nowTime - preTime &amp;gt; wait) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      fn.apply(context, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      preTime = nowTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JS" scheme="https://github.com/wz71014q/categories/JS/"/>
    
    
      <category term="JS" scheme="https://github.com/wz71014q/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>js基础之作用域链与闭包，执行上下文与活动对象</title>
    <link href="https://github.com/wz71014q/2019/04/06/js%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E4%B8%8E%E9%97%AD%E5%8C%85%EF%BC%8C%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E6%B4%BB%E5%8A%A8%E5%AF%B9%E8%B1%A1/"/>
    <id>https://github.com/wz71014q/2019/04/06/js基础之作用域链与闭包，执行上下文与活动对象/</id>
    <published>2019-04-06T12:00:00.000Z</published>
    <updated>2019-09-26T03:31:07.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是执行上下文（或叫执行环境-Execution-context-EC）？"><a href="#什么是执行上下文（或叫执行环境-Execution-context-EC）？" class="headerlink" title="什么是执行上下文（或叫执行环境: Execution context, EC）？"></a>什么是执行上下文（或叫执行环境: Execution context, EC）？</h2><ul><li>执行环境定义了变量或函数有权访问的其他数据，每个函数都有自己的执行环境。通俗来讲，就是执行JS代码的环境的抽象概念。执行环境分为三类：<pre><code>全局执行环境——浏览器环境下是window局部执行环境——函数被调用时被创建eval执行环境——不建议使用该方法</code></pre></li><li>JS在执行代码时会将代码运行时创建的所有执行上下文压入一个栈内，即执行环境栈。<br>当 JavaScript 引擎第一次执行JS代码时，它会创建一个全局的执行上下文并且压入当前执行环境栈。每当引擎遇到一个函数调用，它会为该函数创建一个新的执行上下文并压入栈的顶部。引擎会执行那些执行上下文位于栈顶的函数。当该函数执行结束时，执行上下文从栈中弹出，控制流程到达当前栈中的下一个上下文。<br>e.g.:<a id="more"></a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> valA = <span class="string">'a'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this ec is A'</span>);</span><br><span class="line">    B();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> valA = <span class="string">'a'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this ec is B'</span>);</span><br><span class="line">&#125;</span><br><span class="line">A();</span><br></pre></td></tr></table></figure><p>上面的代码刚开始执行环境栈里只有全局执行环境，随后执行A方法，即创建A的执行环境并将其压入执行环境栈，接着是B，B方法执行完后立即释放。最后只剩下全局执行环境<br><img src="https://raw.githubusercontent.com/wz71014q/img/master/ec-1.png" alt="stack"><br><img src="https://raw.githubusercontent.com/wz71014q/img/master/ec-2.png" alt="stack"></p><h2 id="什么是变量对象？"><a href="#什么是变量对象？" class="headerlink" title="什么是变量对象？"></a>什么是变量对象？</h2><ul><li>每个执行环境中都包含一个变量对象，环境中定义的所有变量和函数都保存在这个对象中，包括argumnets、variables、functions</li></ul><h2 id="什么是作用域链-scope-chain-？"><a href="#什么是作用域链-scope-chain-？" class="headerlink" title="什么是作用域链(scope chain)？"></a>什么是作用域链(scope chain)？</h2><ul><li>javascript函数的执行用到了作用域链，这个作用域链是函数定义的时候创建的,当定义一个函数时，它实际保存一个作用域链。当调用这个函数时，它创建一个新的对象来存储它的局部变量，并将这个对象添加至保存的作用域链。作用域链的前端始终都是当前执行的代码所在环境的变量对象。作用域链的末端始终都是全局执行环境的变量对象。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有权访问。在执行环境中，用[[scope]]来表示。<br>e.g.:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> valA = <span class="string">'a'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this ec is A'</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> valB = <span class="string">'b'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(valA);</span><br><span class="line">    &#125;</span><br><span class="line">    B();</span><br><span class="line">&#125;</span><br><span class="line">A();</span><br></pre></td></tr></table></figure><p>如上例，执行到A内部的B方法时，B()的变量对象内没有valA变量，即沿着作用域链向上查找，找到A的变量对象里有valA，即输出valA的值<br><img src="https://raw.githubusercontent.com/wz71014q/img/master/ec-3.png" alt="stack"></p><h2 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h2><p>闭包就是一个函数可以访问另一个函数作用域内的变量，一般容易出现在函数内部创建新的函数<br>调试工具<br>使用chrome的Scope可以看到当前的作用域链和执行上下文<br><img src="https://raw.githubusercontent.com/wz71014q/img/master/ec-4.png" alt="stack"><br>call stack是执行环境栈<br><img src="https://raw.githubusercontent.com/wz71014q/img/master/ec-5.png" alt="stack"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是执行上下文（或叫执行环境-Execution-context-EC）？&quot;&gt;&lt;a href=&quot;#什么是执行上下文（或叫执行环境-Execution-context-EC）？&quot; class=&quot;headerlink&quot; title=&quot;什么是执行上下文（或叫执行环境: Execution context, EC）？&quot;&gt;&lt;/a&gt;什么是执行上下文（或叫执行环境: Execution context, EC）？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;执行环境定义了变量或函数有权访问的其他数据，每个函数都有自己的执行环境。通俗来讲，就是执行JS代码的环境的抽象概念。执行环境分为三类：&lt;pre&gt;&lt;code&gt;全局执行环境——浏览器环境下是window
局部执行环境——函数被调用时被创建
eval执行环境——不建议使用该方法
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;JS在执行代码时会将代码运行时创建的所有执行上下文压入一个栈内，即执行环境栈。&lt;br&gt;当 JavaScript 引擎第一次执行JS代码时，它会创建一个全局的执行上下文并且压入当前执行环境栈。每当引擎遇到一个函数调用，它会为该函数创建一个新的执行上下文并压入栈的顶部。引擎会执行那些执行上下文位于栈顶的函数。当该函数执行结束时，执行上下文从栈中弹出，控制流程到达当前栈中的下一个上下文。&lt;br&gt;e.g.:
    
    </summary>
    
      <category term="JS" scheme="https://github.com/wz71014q/categories/JS/"/>
    
    
      <category term="JS" scheme="https://github.com/wz71014q/tags/JS/"/>
    
      <category term="执行环境" scheme="https://github.com/wz71014q/tags/%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83/"/>
    
      <category term="EC" scheme="https://github.com/wz71014q/tags/EC/"/>
    
  </entry>
  
  <entry>
    <title>CSS-回流(reflow)与重绘(repaint)</title>
    <link href="https://github.com/wz71014q/2019/03/23/CSS-%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E7%BB%98/"/>
    <id>https://github.com/wz71014q/2019/03/23/CSS-回流与重绘/</id>
    <published>2019-03-23T12:00:00.000Z</published>
    <updated>2019-09-26T03:31:07.507Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是回流（重排）和重绘？"><a href="#什么是回流（重排）和重绘？" class="headerlink" title="什么是回流（重排）和重绘？"></a>什么是回流（重排）和重绘？</h2><ul><li>1、回流：渲染树中的一部分或全部元素的尺寸、布局、隐藏等属性改变时，会引起渲染树重新构建，这就叫回流（reflow），也叫重排。比如调整窗口大小、设置字体大小、dispaly、获取实时属性offset系列、用户在input输入、激活CSS伪类:hover等等。</li><li>2、重绘：当一些元素的可见性发生变化时，会引起重绘。比如outline、visibility、backgound-color等的变化。</li><li><p>3、第一次渲染时一定会有回流和重绘。回流一定会引起重绘，重绘不一定引起回流。</p></li><li><p>三个演示渲染过程的视频：<br><a href="http://www.youtube.com/watch?v=nJtBUHyNBxs" target="_blank" rel="noopener">http://www.youtube.com/watch?v=nJtBUHyNBxs</a><br><a href="http://www.youtube.com/watch?v=ZTnIxIA5KGw" target="_blank" rel="noopener">http://www.youtube.com/watch?v=ZTnIxIA5KGw</a><br><a href="http://www.youtube.com/watch?v=dndeRnzkJDU" target="_blank" rel="noopener">http://www.youtube.com/watch?v=dndeRnzkJDU</a></p></li></ul><h2 id="如何减少回流（reflow）、重绘（repaint）？"><a href="#如何减少回流（reflow）、重绘（repaint）？" class="headerlink" title="如何减少回流（reflow）、重绘（repaint）？"></a>如何减少回流（reflow）、重绘（repaint）？</h2><a id="more"></a><ul><li>一、 CSS中避免回流、重绘或将它们的性能影响降到最低<br>1.尽可能在DOM树的最末端改变class。节点越靠前，回流影响的性能消耗越大。<br>2.避免设置多层内联样式<br>3.复杂动画效果应用到position属性为absolute或fixed的元素上，这些元素不影响其他元素，只是这些元素进行重新绘制。可以避免引起父元素以及后续元素的频繁回流。<br>4.避免使用table布局。因为表格中任意一个小变化都会导致表格内的其他节点回流<br>5.使用css3硬件加速，不会引起回流重绘<br>常见的可以触发硬件加速的属性：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span></span><br><span class="line"><span class="selector-tag">opacity</span></span><br><span class="line"><span class="selector-tag">filters</span></span><br><span class="line"><span class="selector-tag">Will-change</span></span><br></pre></td></tr></table></figure><ul><li>二、 JS操作避免回流、重绘<br>1、假设要多次操作dom，应该在当前DOM树之外重新设置一个子树，全部操作完毕后再插入或替换DOM树的节点<br>e.g.：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cosnt childNode = <span class="built_in">document</span>.createElement(div);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i += <span class="number">1</span>;) &#123;</span><br><span class="line">  cosnt item = <span class="built_in">document</span>.createElement(p);</span><br><span class="line">  childNode.appendChild(item);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(childNode);</span><br></pre></td></tr></table></figure><p>2.避免使用JS一个样式修改完接着改下一个样式，最好一次性更改CSS样式，或者将样式列表定义为class的名称<br>e.g.：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ele = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>);</span><br><span class="line">ele.style.backgroundColor = <span class="string">'#ccc'</span>;</span><br><span class="line">ele.style.width = <span class="string">'100px'</span>;</span><br><span class="line">ele.style.height = <span class="string">'100px'</span>;  </span><br><span class="line">应该写为：  </span><br><span class="line">ele.style.cssText += <span class="string">'backround-color: #ccc; width: 100px; height: 100px;'</span>;</span><br></pre></td></tr></table></figure><p>3.先隐藏元素，进行修改后再显示该元素，因为display:none上的DOM操作不会引发回流和重绘<br>4.避免循环读取offsetLeft等属性，在循环之前把它们存起来。下面这些属性会引起回流</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">offsetLeft/Top/Right/Bottom</span><br><span class="line">scrollHeight/scrollWidth/scrollLeft/scrollRight</span><br><span class="line">clientTop/Right/Bottom/Left</span><br><span class="line">getComputedStyle()  <span class="comment">// 获取当前样式</span></span><br><span class="line">getBoundingClientRect</span><br></pre></td></tr></table></figure><p>使用举例：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ele.offsetTop += <span class="number">1</span>;</span><br><span class="line">写为：</span><br><span class="line"><span class="keyword">const</span> eleTop = ele.offsetTop;</span><br><span class="line">eleTop += <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>5.对于复杂动画效果,使用绝对定位让其脱离文档流，否则会引起父元素及后续元素大量的回流<br>动画性能调试方法(以chrome为例)：<br><img src="https://raw.githubusercontent.com/wz71014q/img/master/repaint.png" alt="stack"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是回流（重排）和重绘？&quot;&gt;&lt;a href=&quot;#什么是回流（重排）和重绘？&quot; class=&quot;headerlink&quot; title=&quot;什么是回流（重排）和重绘？&quot;&gt;&lt;/a&gt;什么是回流（重排）和重绘？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1、回流：渲染树中的一部分或全部元素的尺寸、布局、隐藏等属性改变时，会引起渲染树重新构建，这就叫回流（reflow），也叫重排。比如调整窗口大小、设置字体大小、dispaly、获取实时属性offset系列、用户在input输入、激活CSS伪类:hover等等。&lt;/li&gt;
&lt;li&gt;2、重绘：当一些元素的可见性发生变化时，会引起重绘。比如outline、visibility、backgound-color等的变化。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3、第一次渲染时一定会有回流和重绘。回流一定会引起重绘，重绘不一定引起回流。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;三个演示渲染过程的视频：&lt;br&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=nJtBUHyNBxs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.youtube.com/watch?v=nJtBUHyNBxs&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=ZTnIxIA5KGw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.youtube.com/watch?v=ZTnIxIA5KGw&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=dndeRnzkJDU&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.youtube.com/watch?v=dndeRnzkJDU&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;如何减少回流（reflow）、重绘（repaint）？&quot;&gt;&lt;a href=&quot;#如何减少回流（reflow）、重绘（repaint）？&quot; class=&quot;headerlink&quot; title=&quot;如何减少回流（reflow）、重绘（repaint）？&quot;&gt;&lt;/a&gt;如何减少回流（reflow）、重绘（repaint）？&lt;/h2&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://github.com/wz71014q/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://github.com/wz71014q/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS-可视化格式模型</title>
    <link href="https://github.com/wz71014q/2019/03/23/CSS-%E5%8F%AF%E8%A7%86%E5%8C%96%E6%A0%BC%E5%BC%8F%E6%A8%A1%E5%9E%8B/"/>
    <id>https://github.com/wz71014q/2019/03/23/CSS-可视化格式模型/</id>
    <published>2019-03-23T12:00:00.000Z</published>
    <updated>2019-09-26T03:31:07.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本盒模型"><a href="#基本盒模型" class="headerlink" title="基本盒模型"></a>基本盒模型</h2><p>每个人在学习CSS时一定会接触到盒模型，比如最基本的IE盒模型和W3C标准盒模型。文档进行布局（lay out）的时候，浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型（CSS basic box model），将所有元素表示为一个个矩形的盒子（box）。CSS 决定这些盒子的大小、位置以及属性（例如颜色、背景、边框尺寸…）。每个盒子由四个部分（或称区域）组成，其效用由它们各自的边界（Edge）所定义。每个盒子有四个边界：内容边界 Content edge、内边距边界 Padding Edge、边框边界 Border Edge、外边框边界 Margin Edge。</p><ul><li>其中，两种盒模型都由内容、内边距、边框和外边距组成，可以用box-sizing属性进行切换；</li><li>区别点是W3C标准盒模型的width和height只包含内容区Content，IE盒模型的width和height包含内容区、内边距Padding和边框Border。</li><li>注意：background同时作用于内容区、内边距和边框！</li></ul><p>如图给一个div设置宽高都是100px，W3C标准盒模型跟IE盒模型表现出的实际的盒子<font color="red">内容区大小</font>是不一样的<br><a id="more"></a><br><img src="https://raw.githubusercontent.com/wz71014q/img/master/cssbox/W3CBox.png" alt="W3CBox"><br><img src="https://raw.githubusercontent.com/wz71014q/img/master/cssbox/IEBox.png" alt="IEBox"></p><p>基本的盒模型可以帮助我们进行更准确的布局，但是页面渲染用到的盒模型可不止这些。最近看到一种以前不知道的垂直居中布局的代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>我是居中的元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">css</span>:</span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本来伪元素和伪类用的就不怎么样，看到这个就很不理解了。向大佬们请教，进而得知<font color="red">“可视化格式模型”</font>这种东西。想起之前看到浏览器渲染页面的视频，确实是一个一个的框框堆积起来:</p><p><img src="https://raw.githubusercontent.com/wz71014q/img/master/render.gif" alt></p><h2 id="什么是可视化格式模型？"><a href="#什么是可视化格式模型？" class="headerlink" title="什么是可视化格式模型？"></a>什么是可视化格式模型？</h2><p>官方解释是：它规定了客户端（浏览器）如何在媒介（显示器）中渲染文档树(document tree)。如上图，每个节点、元素都有属于自己的可见或不可见、有名或匿名的盒模型，可视化格式模型即规定了这些盒、框框如何整齐地排列在页面中，还有盒子之间的相互作用。</p><h2 id="可视化格式模型"><a href="#可视化格式模型" class="headerlink" title="可视化格式模型"></a>可视化格式模型</h2><ol><li>包含块CB(Containing block)</li><li>控制框：块框、行框</li><li>FC(Formatting Context, 格式化上下文)</li></ol><ul><li><ol><li>BFC(Block Formatting Context, 块级格式化上下文)</li></ol></li><li><ol start="2"><li>IFC(Inline Formatting Context, 行内格式上下文)</li></ol></li><li><ol start="3"><li>GFC(Grid Formatting Context, 网格布局格式化上下文)</li></ol></li><li><ol start="4"><li>FFC(Flex formatting contexts, 自适应格式上下文)</li></ol></li></ul><ol start="4"><li>定位体系(普通流、定位流、浮动流)</li><li>浮动体系</li></ol><h3 id="包含块"><a href="#包含块" class="headerlink" title="包含块"></a>包含块</h3><ol><li>根元素<html>的包含块是一个被称为初始包含块的矩形</html></li><li>如果 position 属性为 static 或 relative ，包含块就是由它的最近的祖先块元素（比如说inline-block, block 或 list-item元素）或格式化上下文的<font color="red">内容区(只有content)</font>的边缘组成的。</li><li>如果position属性为 absolute，包含块就是最近的position属性不为static值的祖先块元素的<font color="red">内边距区的边缘(content + padding)</font>组成(padding框)。</li></ol><p></p><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="wz71014q" data-slug-hash="yWbxjp" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="yWbxjp"><br>  <span>See the Pen <a href="https://codepen.io/wz71014q/pen/yWbxjp/" target="_blank" rel="noopener"><br>  yWbxjp</a> by Qiang (<a href="https://codepen.io/wz71014q" target="_blank" rel="noopener">@wz71014q</a>)<br>  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span><br></p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><ol start="4"><li>如果 position 属性是 absolute 或 fixed，包含块也可能是由满足以下条件的最近父级元素的内边距区的边缘组成的：<blockquote><p>transform 或 perspective 值不为 none；<br>will-change 值是 transform 或 perspective<br>filter 值不为 none 或 will-change 值是 filter (Firefox下).</p></blockquote></li><li>如果 position 属性是 fixed，包含块就是由 viewport (in the case of continuous media) 或是组成的。</li><li>CSS中的百分比是根据生成的框的包含块的高度计算的。如果未明确指定包含块的高度（即要使用百分比，包含块必须有宽度和高度），并且此元素未绝对定位，则百分比值将被视为“0”（对于“min-height”）或“none” （’max-height’）。</li><li>如果要计算 height top 及 bottom 中的百分值，是通过包含块的 height 的值。如果包含块的 height 值会根据它的内容变化，而且包含块的 position 属性的值被赋予 relative 或 static ，那么，这些值的计算值为 0。要计算 width, left, right, padding, margin 这些属性由包含块的 width 属性的值来计算它的百分值。</li><li>以百分比为单位时，包含块大小跟盒模型有关，主要受其padding属性影响。给两种盒模型的子元素设置width=50%，不同的盒模型，子元素的width是不同的。</li></ol><h3 id="控制框"><a href="#控制框" class="headerlink" title="控制框"></a>控制框</h3><h4 id="块框"><a href="#块框" class="headerlink" title="块框"></a>块框</h4><ol><li>块级元素会生成一个块框（Block Box），块框会占据一整行，用来包含子box和生成的内容；</li><li>块框同时也是一个块包含框（Containing Box），里面要么只包含块框，要么只包含行内框（不能混杂）；</li><li>如果块框内部有块级元素也有行内元素，那么行内元素会被匿名块框包围。也就是说如果一个块框在其中包含另一个块框，那么我们强迫它只能包含块框，因此其他文本内容生成出来的都是匿名块框（而不是匿名行内框）</li></ol><p>如下，div为一个块框、p是另一个块框。上一行文本被包含在一个匿名块框内</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   I'm some text!</span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>I'm included by p!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="行内框"><a href="#行内框" class="headerlink" title="行内框"></a>行内框</h4><ul><li>一个行内元素生成一个行内框；行内元素能排在一行，允许左右有其他元素。</li></ul><h3 id="FC"><a href="#FC" class="headerlink" title="FC"></a>FC</h3><ul><li>格式化上下文定义框内部的元素渲染规则，它可以将框内部与外部隔开，外部样式不会影响内部</li><li>包含块级格式化上下文BFC、行内格式化上下文IFC、网格布局格式化上下文GFC、自适应格式上下文FFC(Flex formatting contexts)</li></ul><h4 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h4><p>常用的创建块级格式化上下文的方式有：</p><ul><li>根元素或包含根元素的元素</li><li>overflow不为visible的块元素。</li><li>行内块元素(display = inline-bloc 会在元素外层产生IFC（所以这个元素可以通过text-align水平居中），当然，它的内部则按照BFC规则渲染)</li><li>浮动元素</li><li>绝对定位元素</li><li>弹性元素(flex)<br>完整内容见<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noopener">MDN</a></li></ul><p>BFC特点：</p><ul><li>清除浮动。内部box在垂直方向，一个接一个的放置，BFC区域不会与float box重叠</li><li>外边距塌陷。box的垂直方向由margin决定，属于同一个BFC的两个box间的margin会重叠</li><li>BFC就是页面上的一个隔离的独立容器，容器里的子元素不会影响到外面的元素，反之也是如此；</li><li>计算BFC的高度时，浮动元素也参与计算（不会浮动塌陷如overflow：hidden清除浮动就是这个原理）；</li></ul><p></p><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="wz71014q" data-slug-hash="JqNeVL" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="JqNeVL"><br>  <span>See the Pen <a href="https://codepen.io/wz71014q/pen/JqNeVL/" target="_blank" rel="noopener"><br>  JqNeVL</a> by Qiang (<a href="https://codepen.io/wz71014q" target="_blank" rel="noopener">@wz71014q</a>)<br>  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span><br></p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h4 id="IFC"><a href="#IFC" class="headerlink" title="IFC"></a>IFC</h4><ul><li>行内元素可以产生行内格式化上下文</li><li>行内框是水平方向一个接一个排列，起点是包含块的顶部。</li><li>行内格式化上下文高度由其包含行内元素中最高的实际高度计算而来(不受到竖直方向的padding/margin影响）。水平方向上的margin，border和padding在框之间会保留。框在垂直方向上可以以不同的方式对齐：顶部、底部对齐或根据其中文字的基线对齐)</li><li>最高的元素高度未设置时，行内框的高度由line-height决定，而其内部的包含块之间的可以高度各不相同(比如只含文本的行框高度与包含图片的行框高度之间)。line-height是上下两行文本的基线之间的距离</li></ul><h4 id="FFC"><a href="#FFC" class="headerlink" title="FFC"></a>FFC</h4><p>自适应格式化上下文，当设置display为flex时，内部生成一个BFC。设置display为inline-flex时，内部生成一个IFC</p><h4 id="GFC"><a href="#GFC" class="headerlink" title="GFC"></a>GFC</h4><p>网格布局格式化上下文，当为一个元素设置display值为grid的时候，此元素将会获得一个独立的渲染区域</p><p>最后，解释一下为什么上面的元素可以居中。行内框的高度能够容纳它包含的所有框,当框的高度小于行内框的高度(例如,如果框是baseline对齐)时,框的竖直对齐方式由vertical-align属性决定。所以class = main的div的伪元素跟“我是居中的元素”形成了一个行内框，而设置行内框的对齐方式为middle，就居中了。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://segmentfault.com/a/1190000014872270" target="_blank" rel="noopener">CSS-可视化格式模型</a><br><a href="https://segmentfault.com/a/1190000009308818" target="_blank" rel="noopener">行内格式上下文</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/All_About_The_Containing_Block" target="_blank" rel="noopener">MDN-布局和包含块</a><br><a href="https://www.w3.org/TR/CSS21/visudet.html#root-height" target="_blank" rel="noopener">https://www.w3.org/TR/CSS21/visudet.html#root-height</a><br>《CSS 世界》– 张鑫旭</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本盒模型&quot;&gt;&lt;a href=&quot;#基本盒模型&quot; class=&quot;headerlink&quot; title=&quot;基本盒模型&quot;&gt;&lt;/a&gt;基本盒模型&lt;/h2&gt;&lt;p&gt;每个人在学习CSS时一定会接触到盒模型，比如最基本的IE盒模型和W3C标准盒模型。文档进行布局（lay out）的时候，浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型（CSS basic box model），将所有元素表示为一个个矩形的盒子（box）。CSS 决定这些盒子的大小、位置以及属性（例如颜色、背景、边框尺寸…）。每个盒子由四个部分（或称区域）组成，其效用由它们各自的边界（Edge）所定义。每个盒子有四个边界：内容边界 Content edge、内边距边界 Padding Edge、边框边界 Border Edge、外边框边界 Margin Edge。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其中，两种盒模型都由内容、内边距、边框和外边距组成，可以用box-sizing属性进行切换；&lt;/li&gt;
&lt;li&gt;区别点是W3C标准盒模型的width和height只包含内容区Content，IE盒模型的width和height包含内容区、内边距Padding和边框Border。&lt;/li&gt;
&lt;li&gt;注意：background同时作用于内容区、内边距和边框！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图给一个div设置宽高都是100px，W3C标准盒模型跟IE盒模型表现出的实际的盒子&lt;font color=&quot;red&quot;&gt;内容区大小&lt;/font&gt;是不一样的&lt;br&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://github.com/wz71014q/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://github.com/wz71014q/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS-loading</title>
    <link href="https://github.com/wz71014q/2018/10/23/CSS-loading/"/>
    <id>https://github.com/wz71014q/2018/10/23/CSS-loading/</id>
    <published>2018-10-23T12:00:00.000Z</published>
    <updated>2019-09-26T03:31:07.506Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;曾经以为，loading的制作需要一些比较高深的动画技术，后来发现大多数loading都可以用“障眼法”做出来。比如一个旋转的圆圈，并不都是将gif图放进去，有些就是画个静止图像，然后让它旋转就完了。gif图也可以，但是加载时间比较长。<br>&emsp;&emsp;CSS就可以做出大多数的loading，比如：<br><img src="https://raw.githubusercontent.com/wz71014q/img/master/loading-1.gif" alt="piano"><img src="https://raw.githubusercontent.com/wz71014q/img/master/loading-4.gif" alt="heart"><img src="https://raw.githubusercontent.com/wz71014q/img/master/loading-2.gif" alt="circle"><img src="https://raw.githubusercontent.com/wz71014q/img/master/loading-5.gif" alt="cicrleProgress"><br>如何制作？<br><a id="more"></a></p><h1 id="loading1"><a href="#loading1" class="headerlink" title="loading1"></a>loading1</h1><p>1、HTML:  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ddr"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ddr ddr1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ddr ddr2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ddr ddr3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ddr ddr4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ddr ddr5"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-id">#ddr</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ddr</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#00ff00</span>;</span><br><span class="line">    <span class="attribute">animation</span>: loading <span class="number">1s</span> infinite ease-in-out;<span class="comment">/*animation：动画名称 持续时间 动画速度曲线 延迟 执行多少次 是否正反方向轮流播放*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ddr2</span>&#123;</span><br><span class="line">    <span class="attribute">animation-delay</span>: -<span class="number">0.9s</span>;<span class="comment">/*定义开始执行的地方，负号表示直接从第900ms开始执行*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ddr3</span>&#123;</span><br><span class="line">    <span class="attribute">animation-delay</span>: -<span class="number">0.8s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ddr4</span>&#123;</span><br><span class="line">    <span class="attribute">animation-delay</span>: -<span class="number">0.7s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ddr5</span>&#123;</span><br><span class="line">    <span class="attribute">animation-delay</span>: -<span class="number">0.6s</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> loading &#123;</span><br><span class="line">    0%,40%,100%&#123; <span class="comment">/*定义每帧的动作*/</span></span><br><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scaleY</span>(0.5);</span><br><span class="line">    &#125;</span><br><span class="line">    20%&#123;</span><br><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">scaleY</span>(1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="loading2"><a href="#loading2" class="headerlink" title="loading2"></a>loading2</h1><p>1、HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"loading4"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"loader4"</span> <span class="attr">class</span>=<span class="string">"heart"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#loading4</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#loader4</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="built_in">calc</span>(50% - 25px);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">animation</span>: loader-<span class="number">4</span> <span class="number">1s</span> ease-in-out alternate infinite;</span><br><span class="line">&#125;</span><br><span class="line">.heart:before&#123; // 让两个一端为圆角的长方形叠加形成心型，然后按规律缩放</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">    <span class="selector-tag">left</span>: 11<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">content</span>: "";</span><br><span class="line">    <span class="selector-tag">width</span>: 50<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">height</span>: 80<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(45<span class="selector-tag">deg</span>);</span><br><span class="line">    <span class="selector-tag">background-color</span>: <span class="selector-tag">rgb</span>(230, 6, 6);</span><br><span class="line">    <span class="selector-tag">border-radius</span>: 50<span class="selector-tag">px</span> 50<span class="selector-tag">px</span> 0 0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.heart</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">11px</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(230, 6, 6);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-45deg);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> loader-<span class="number">4</span> &#123;</span><br><span class="line">    0%&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(0.2);</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    100%&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="loading3"><a href="#loading3" class="headerlink" title="loading3"></a>loading3</h1><p>1、HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"circle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-id">#circle</span>&#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> white solid;</span><br><span class="line">  <span class="attribute">border-left-color</span>: <span class="number">#ff5500</span>;</span><br><span class="line">  <span class="attribute">border-right-color</span>:<span class="number">#0c80fe</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">animation</span>: loading1 <span class="number">1s</span> infinite linear;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> loading1&#123;</span><br><span class="line">  <span class="selector-tag">from</span>&#123;<span class="attribute">transform</span>: <span class="built_in">rotate</span>(0deg)&#125;<span class="selector-tag">to</span>&#123;<span class="attribute">transform</span>: <span class="built_in">rotate</span>(360deg)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="loading4"><a href="#loading4" class="headerlink" title="loading4"></a>loading4</h1><p>0、原理  </p><p><div align="center"><img src="https://raw.githubusercontent.com/wz71014q/img/master/loading-6.png" alt><br>如图，先画一个正方形，这个正方形就是环形loading的轨道（现在还不是），再将一个圆放在上面，充当遮蔽物。  </div></p><p><div align="center"><img src="https://raw.githubusercontent.com/wz71014q/img/master/loading-7.png" alt><br>运用clip-path(原先是clip，但是这个属性即将被删除。另外clip-path属性兼容性很差)属性可以裁剪图像，将上面的圆裁为一半，假如这个圆的右半部分一直看不见，旋转左边这个半圆，会出现怎样的效果呢？  </div></p><p><div align="center"><img src="https://raw.githubusercontent.com/wz71014q/img/master/loading-8-1.png" alt>  </div></p><p><div align="center"><img src="https://raw.githubusercontent.com/wz71014q/img/master/loading-8-2.png" alt><br>如图，就是这种效果，这时候再加一个遮罩，就形成了下面这种效果：  </div></p><p><div align="center"><img src="https://raw.githubusercontent.com/wz71014q/img/master/loading-9.png" alt><br>再将最下面的正方形变成圆形（变成真正的轨道），旋转橙色部分的圆环，底部青色的就会露出来，就形成了进度条的效果  </div></p><p><div align="center"><img src="https://raw.githubusercontent.com/wz71014q/img/master/loading-10.png" alt><br>这是左边的一半，将右边的一半补齐：  </div></p><p><div align="center"><img src="https://raw.githubusercontent.com/wz71014q/img/master/loading-11.png" alt><br>中间白色部分是mask遮罩，加上相应的文字，调整颜色就ok啦！  </div></p><p><div align="center"><img src="https://raw.githubusercontent.com/wz71014q/img/master/loading-12.png" alt><br>这里的渐变效果并不是径向渐变，如果用径向渐变制作，效果会更好。  </div></p><p><div align="left">1、HTML</div></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"progress.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"circle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"preLeft"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"preRight"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mask"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span>%</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"progress.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、CSS  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.circle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">7px</span> <span class="number">0px</span> inset;</span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">linear-gradient</span>(#9ED110, #50B517, #179067, #476EAF, #9f49ac, #CC42A2, #FF3BA7, #FF5800, #FF8100, #FEAC00, #FFCC00, #EDE604);</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(8px);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(1.1);</span><br><span class="line">  <span class="attribute">-webkit-mask</span>: <span class="built_in">radial-gradient</span>(black 30px, #0000 90px);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.preLeft</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(0 0, 50% 0, 50% 100%, 0 100%);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">0px</span> inset;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(0deg);</span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(0 0, 50% 0, 50% 100%, 0 100%);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.preRight</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(50% 0, 100% 0, 100% 100%, 50% 100%);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">0px</span> inset;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(0deg);</span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(50% 0, 100% 0, 100% 100%, 50% 100%);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mask</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="comment">/* box-shadow: 0 0 5px 0px; */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#FFF</span>; </span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、JS更新内部进度  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> left = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'left'</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> right = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'right'</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> progress = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'progress'</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> value = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (progress.innerHTML &lt; <span class="number">100</span>) &#123;</span><br><span class="line">      progress.innerHTML = value++;</span><br><span class="line">      <span class="keyword">if</span> (value &lt;= <span class="number">50</span>) &#123;</span><br><span class="line">        right.style.transform = <span class="string">'rotate('</span> + (value * <span class="number">3.6</span>) + <span class="string">'deg)'</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">        left.style.transform = <span class="string">'rotate('</span> + ((value - <span class="number">50</span>) * <span class="number">3.6</span>) + <span class="string">'deg)'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      clearInterval(timer);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  init();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p>逢年过节，百度或者谷歌都会在首页播放一段动画，比如元宵节：  </p><p><div align="center"><img src="https://raw.githubusercontent.com/wz71014q/img/master/loading-13.gif" alt>  </div></p><p><div align="left">这个动画不仅仅是gif图，有时候是一张长长的包含所有帧的图片：<br><img src="https://raw.githubusercontent.com/wz71014q/img/master/loading-14.png" alt><br>仿照animation一帧一桢的思路，可以将这张图片做成动画：  </div></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#picHolder</span>&#123;</span><br><span class="line"><span class="comment">/* 图片样式 */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">17%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">270px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">129px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">135px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"../../../Library_image/tangyuan.png"</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-position-x</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animation</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">/* 定时移动图片，使观众看到不同的帧 */</span></span><br><span class="line">  <span class="keyword">var</span> po = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> holder = <span class="built_in">document</span>.getElementById(<span class="string">'picHolder'</span>)</span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    po += <span class="number">-270</span></span><br><span class="line">    i++</span><br><span class="line">    holder.style.backgroundPositionX = po + <span class="string">'px'</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">31</span>) &#123;</span><br><span class="line">      i = <span class="number">0</span></span><br><span class="line">      po = <span class="number">270</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  animation()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;曾经以为，loading的制作需要一些比较高深的动画技术，后来发现大多数loading都可以用“障眼法”做出来。比如一个旋转的圆圈，并不都是将gif图放进去，有些就是画个静止图像，然后让它旋转就完了。gif图也可以，但是加载时间比较长。&lt;br&gt;&amp;emsp;&amp;emsp;CSS就可以做出大多数的loading，比如：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wz71014q/img/master/loading-1.gif&quot; alt=&quot;piano&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wz71014q/img/master/loading-4.gif&quot; alt=&quot;heart&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wz71014q/img/master/loading-2.gif&quot; alt=&quot;circle&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wz71014q/img/master/loading-5.gif&quot; alt=&quot;cicrleProgress&quot;&gt;&lt;br&gt;如何制作？&lt;br&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://github.com/wz71014q/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://github.com/wz71014q/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS-选择器</title>
    <link href="https://github.com/wz71014q/2018/08/23/CSS-%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>https://github.com/wz71014q/2018/08/23/CSS-选择器/</id>
    <published>2018-08-23T12:00:00.000Z</published>
    <updated>2019-09-26T03:31:07.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用的选择器"><a href="#常用的选择器" class="headerlink" title="常用的选择器"></a>常用的选择器</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># <span class="comment">/* ID */</span></span><br><span class="line">. <span class="comment">/* 类名 */</span></span><br><span class="line"><span class="selector-tag">element</span>(<span class="selector-tag">div</span>) <span class="comment">/* 标签 */</span></span><br><span class="line"><span class="selector-tag">A</span>, <span class="selector-tag">E</span> <span class="comment">/* 所有A元素和B元素 */</span></span><br><span class="line"><span class="selector-tag">A</span> <span class="selector-tag">E</span> <span class="comment">/* 元素A的任一后代元素E (后代节点指A的子节点，子节点的子节点，以此类推) */</span></span><br><span class="line"><span class="selector-pseudo">:first-child</span> <span class="comment">/* 第一个子元素 */</span></span><br><span class="line"><span class="selector-pseudo">:last-child</span> <span class="comment">/* 最后一个子元素 */</span></span><br><span class="line"><span class="selector-pseudo">:nth-child(n)</span> <span class="comment">/* 第n个子元素 */</span></span><br><span class="line"><span class="selector-pseudo">:hover</span> <span class="comment">/* 鼠标悬停 */</span></span><br><span class="line"><span class="selector-pseudo">:active</span> <span class="comment">/* 被激活(点击) */</span></span><br></pre></td></tr></table></figure><h2 id="关系形选择器"><a href="#关系形选择器" class="headerlink" title="关系形选择器"></a>关系形选择器</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">A</span>, <span class="selector-tag">E</span> <span class="comment">/* 所有A元素和B元素 */</span></span><br><span class="line"><span class="selector-tag">A</span> <span class="selector-tag">E</span> <span class="comment">/* 元素A的任一后代元素E (后代节点指A的子节点，子节点的子节点，以此类推) */</span></span><br><span class="line"><span class="selector-tag">A</span> &gt; <span class="selector-tag">E</span> <span class="comment">/*元素A的任一子元素E(也就是直系后代)*/</span></span><br><span class="line"><span class="selector-tag">E</span><span class="selector-pseudo">:first-child</span> <span class="comment">/*任一是其父母结点的第一个子节点的元素E*/</span></span><br><span class="line"><span class="selector-tag">A</span> + <span class="selector-tag">E</span> <span class="comment">/*选择紧接在元素A之后的所有 兄弟元素E*/</span></span><br><span class="line"><span class="selector-tag">A</span> ~ <span class="selector-tag">E</span> <span class="comment">/*同一个父元素下，并且前面有A元素的E*/</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>A ~ E举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 为li中除了第一个li以为的li加border */</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> ~ <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:link</span> <span class="comment">/* 选择所有未被访问的链接。 */</span></span><br><span class="line"><span class="selector-pseudo">:visited</span> <span class="comment">/* 选择所有已被访问的链接。 */</span></span><br><span class="line"><span class="selector-pseudo">:active</span> <span class="comment">/* 选择被激活元素。 */</span></span><br><span class="line"><span class="selector-pseudo">:hover</span> <span class="comment">/* 选择鼠标指针位于其上的链接。 */</span></span><br><span class="line"><span class="selector-pseudo">:focus</span> <span class="comment">/* 选择获得焦点的元素。 */</span></span><br><span class="line"><span class="selector-pseudo">:first-child</span> <span class="comment">/* 第一个子元素 */</span></span><br><span class="line"><span class="selector-pseudo">:nth-child(n)</span> <span class="comment">/* p:nth-child(2) 选择属于其父元素的第二个子元素的每个 &lt;p&gt; 元素。 */</span></span><br><span class="line"><span class="selector-pseudo">:nth-last-child(n)</span> <span class="comment">/* p:nth-last-child(2) 择属于其父元素的倒数第二个子元素的每个 &lt;p&gt; 元素。 */</span></span><br><span class="line"><span class="selector-pseudo">:nth-of-type(n)</span> <span class="comment">/* p:nth-of-type(n) 同一个父元素下同类型元素的第n个兄弟 &lt;p&gt; 元素 */</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-of-type(3)</span> &#123;</span></span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"typeWrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>第1个DIV<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>第2个DIV<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>第3个DIV<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>第1个P<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>第2个P<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>第3个P<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"typeWrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>第一个DIV<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>第一个P<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>第二个DIV<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>第二个P<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>第三个DIV<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>第三个P<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>第三个typeWrapper<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:first-of-type</span> <span class="comment">/* p:first-of-type 选择属于其父元素的首个 &lt;p&gt; 元素的每个 &lt;p&gt; 元素 */</span></span><br><span class="line"><span class="selector-pseudo">:only-child</span> <span class="comment">/* p:only-child 选择属于其父元素的唯一子元素的每个 &lt;p&gt; 元素。*/</span></span><br><span class="line"><span class="selector-pseudo">:last-of-type</span> <span class="comment">/* p:last-of-type 选择属于其父元素的最后 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。 */</span></span><br><span class="line"><span class="selector-pseudo">:empty</span> <span class="comment">/* p:empty 选择没有子元素的每个 &lt;p&gt; 元素。 */</span></span><br><span class="line"><span class="selector-pseudo">:checked</span> <span class="comment">/* input:checked 选择每个被选中的 &lt;input&gt; 元素。 */</span></span><br><span class="line"><span class="selector-pseudo">:enabled</span> <span class="comment">/* input:enabled 选择每个启用的 &lt;input&gt; 元素。 */</span></span><br><span class="line"><span class="selector-pseudo">:disabled</span> <span class="comment">/* input:disabled 选择每个禁用的 &lt;input&gt; 元素 */</span></span><br></pre></td></tr></table></figure><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[attribute]</span> <span class="comment">/* [input] 选择带有 target 属性所有元素。*/</span></span><br><span class="line"><span class="selector-attr">[attribute=value]</span> <span class="comment">/* [input=button] 选择 target="_blank" 的所有元素。*/</span></span><br><span class="line"><span class="selector-attr">[attribute~=value]</span> <span class="comment">/* [title~=flower] 选择 title 属性包含单词 "flower" 的所有元素。*/</span></span><br><span class="line"><span class="selector-attr">[attribute|=value]</span> <span class="comment">/* [lang|=en] 选择 所有lang 属性值以 "en" 开头的所有元素。*/</span></span><br><span class="line"><span class="selector-attr">[attribute^=value]</span> <span class="comment">/* a[src^="https"] 选择其 src 属性值以 "https" 开头的每个 &lt;a&gt; 元素。*/</span></span><br><span class="line"><span class="selector-attr">[attribute$=value]</span> <span class="comment">/* a[src$=".pdf"] 选择其 src 属性以 ".pdf" 结尾的所有 &lt;a&gt; 元素。*/</span></span><br><span class="line"><span class="selector-attr">[attribute*=value]</span> <span class="comment">/* a[src*="abc"] 选择其 src 属性中包含 "abc" 子串的每个 &lt;a&gt; 元素。*/</span></span><br></pre></td></tr></table></figure><p>e.g.覆盖行内样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span></span><br><span class="line">  You can't change me!</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[style="color:red"]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">!<span class="selector-tag">important</span></span><br><span class="line">内联样式</span><br><span class="line"># <span class="comment">/* ID */</span></span><br><span class="line">. <span class="comment">/* 类 */</span>, <span class="selector-attr">[type="radio"]</span> <span class="comment">/* 属性 */</span>, <span class="selector-pseudo">:hover</span> <span class="comment">/* 伪类 */</span></span><br><span class="line"><span class="selector-tag">h1</span> <span class="comment">/* 标签 */</span>, <span class="selector-pseudo">::before</span> <span class="comment">/* 伪元素 */</span></span><br></pre></td></tr></table></figure><p>一种说法是内联样式的权重视为1000，ID权重视为100，类为10，标签为1，关系型为0，对吗？<br>验证：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"expectClass"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"index_1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"index_2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"index_3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"index_4"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"index_5"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"index_6"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"index_7"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"index_8"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"index_9"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"index_10"</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"index_11"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"index_12"</span> <span class="attr">id</span>=<span class="string">"selector_id"</span>&gt;</span>测试选择器的权重<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.expectClass</span> <span class="selector-class">.index_1</span> <span class="selector-class">.index_2</span> <span class="selector-class">.index_3</span> <span class="selector-class">.index_4</span> <span class="selector-class">.index_5</span> <span class="selector-class">.index_6</span> <span class="selector-class">.index_7</span> <span class="selector-class">.index_8</span> <span class="selector-class">.index_9</span> <span class="selector-class">.index_10</span> <span class="selector-class">.index_11</span> <span class="selector-class">.index_12</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: burlywood; <span class="comment">/* 米黄色 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#selector_id</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: blueviolet; <span class="comment">/* 紫色 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的第一种选择法的权重加起来是130，而第二种只有100，结果却是紫色。</p><p><img src="https://raw.githubusercontent.com/wz71014q/img/master/selector/index.png" alt="jestDemoSuccess"></p><p>说明那种说法有问题，实际计算法则如下：</p><ol><li>计算选择器中ID选择器的数量（= A）</li><li>计算选择器中的类选择器，属性选择器和伪类的数量（= B）</li><li>计算选择器中类型选择器和伪元素的数量（= C）</li><li>忽略通用选择器</li><li>通配选择符（universal selector）(*), 关系选择符（combinators） (+, &gt;, ~, ‘ ‘)  和 否定伪类（negation pseudo-class）(:not()) 对优先级没有影响。（但是，在 :not() 内部声明的选择器是会影响优先级）</li><li>A &gt; B &gt; C, A权重为标签数 <em> 65536，B权重为标签数 </em> 256，C权重为标签数 * 1</li><li>当 A 、B 、C 全部相等时，后面声明的值将会是最终的计算值。</li><li>各自的数目最大为255</li></ol><p>即首先计算<font color="#FF0000">ID</font>的数量，然后计算<font color="#00FF00">类选择器</font>、<font color="#00FF00">属性选择器</font>和<font color="#00FF00">伪类</font>的数量，接着计算<font color="#0000FF">类型选择器（标签）</font>和<font color="#0000FF">伪元素</font>的数量</p><p>e.g.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">*               <span class="comment">/* a=0 b=0 c=0 */</span></span><br><span class="line"><span class="selector-tag">li</span>              <span class="comment">/* a=0 b=0 c=1 */</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>          <span class="comment">/* a=0 b=0 c=2 */</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">ol</span>+<span class="selector-tag">li</span>        <span class="comment">/* a=0 b=0 c=3 */</span></span><br><span class="line"><span class="selector-tag">div</span> + *<span class="selector-attr">[type=text]</span>  <span class="comment">/* a=0 b=1 c=1 */</span></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span><span class="selector-class">.red</span>    <span class="comment">/* a=0 b=1 c=3 */</span></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-class">.red</span><span class="selector-class">.level</span>    <span class="comment">/* a=0 b=2 c=1 */</span></span><br><span class="line"><span class="selector-id">#id</span>           <span class="comment">/* a=1 b=0 c=0 */</span></span><br><span class="line"><span class="selector-id">#id</span><span class="selector-pseudo">:not(div)</span>   <span class="comment">/* a=1 b=0 c=1 */</span></span><br><span class="line"><span class="selector-class">.foo</span> <span class="selector-pseudo">:is(.bar</span>, <span class="selector-id">#baz</span>)</span><br><span class="line">                <span class="comment">/* a=1 b=1 c=0 */</span></span><br></pre></td></tr></table></figure><p>先比较A, A相等再比较B，然后再比较C。全部相等则算最后的。后一级不可能超过前一级，来看下webkit对于选择器权重的解读，一个ID选择器权重最小为65536，而第二级类名选择器最大才65280，标签最大255，所以后一级不可能超过前一级。因此没有!important和内联样式时，ID最大。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webkit计算权重的源码</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> unsigned maxValueMask = <span class="number">0xffffff</span>; <span class="comment">// 整个选择器的最大值，十进制表示：idMask + classMask + elementMak = 16777215</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> unsigned idMask = <span class="number">0xff0000</span>; <span class="comment">// ID选择器的最大值，十进制表示：(16*16+16)*16^4=16711680</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> unsigned classMask = <span class="number">0xff00</span>; <span class="comment">// class（伪类、类）选择器的最大值，十进制表示：(16*16+16)*16^2=65280</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> unsigned elementMask = <span class="number">0xff</span>; <span class="comment">// 元素选择器的最大值，十进制表示：16*16+16=255</span></span><br><span class="line"><span class="comment">// ....................</span></span><br><span class="line"></span><br><span class="line">inline unsigned CSSSelector::specificityForOneSelector() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">FIXME:</span> Pseudo-elements and pseudo-classes do not have the same specificity. This function</span></span><br><span class="line">    <span class="comment">// isn't quite correct.</span></span><br><span class="line">    <span class="keyword">switch</span> (m_match) &#123;</span><br><span class="line">    <span class="keyword">case</span> Id:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0x10000</span>; <span class="comment">// ID选择器权重</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> PseudoClass:</span><br><span class="line">        <span class="comment">// <span class="doctag">FIXME:</span> PsuedoAny should base the specificity on the sub-selectors.</span></span><br><span class="line">        <span class="comment">// See http://lists.w3.org/Archives/Public/www-style/2010Sep/0530.html</span></span><br><span class="line">        <span class="keyword">if</span> (pseudoClassType() == PseudoClassNot &amp;&amp; selectorList())</span><br><span class="line">            <span class="keyword">return</span> selectorList()-&gt;first()-&gt;specificityForOneSelector();</span><br><span class="line">        FALLTHROUGH;</span><br><span class="line">    <span class="keyword">case</span> Exact:</span><br><span class="line">    <span class="keyword">case</span> Class:</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">Set</span>:</span><br><span class="line">    <span class="keyword">case</span> List:</span><br><span class="line">    <span class="keyword">case</span> Hyphen:</span><br><span class="line">    <span class="keyword">case</span> PseudoElement:</span><br><span class="line">    <span class="keyword">case</span> Contain:</span><br><span class="line">    <span class="keyword">case</span> Begin:</span><br><span class="line">    <span class="keyword">case</span> End:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0x100</span>; <span class="comment">// class选择器权重</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> Tag:</span><br><span class="line">        <span class="keyword">return</span> (tagQName().localName() != starAtom) ? <span class="number">1</span> : <span class="number">0</span>; <span class="comment">// 元素选择器权重</span></span><br><span class="line">    <span class="keyword">case</span> Unknown:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ASSERT_NOT_REACHED();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>demo地址：<a href="https://github.com/wz71014q/WebWorkSpace/tree/master/projects/learnCSS/selector">https://github.com/wz71014q/WebWorkSpace/tree/master/projects/learnCSS/selector</a></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://juejin.im/post/5abc4fd7f265da237b2228ee" target="_blank" rel="noopener">https://juejin.im/post/5abc4fd7f265da237b2228ee</a><br><a href="https://www.w3.org/TR/selectors/#specificity-rules" target="_blank" rel="noopener">https://www.w3.org/TR/selectors/#specificity-rules</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常用的选择器&quot;&gt;&lt;a href=&quot;#常用的选择器&quot; class=&quot;headerlink&quot; title=&quot;常用的选择器&quot;&gt;&lt;/a&gt;常用的选择器&lt;/h2&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;comment&quot;&gt;/* ID */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;. &lt;span class=&quot;comment&quot;&gt;/* 类名 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;element&lt;/span&gt;(&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;/* 标签 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* 所有A元素和B元素 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* 元素A的任一后代元素E (后代节点指A的子节点，子节点的子节点，以此类推) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:first-child&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* 第一个子元素 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:last-child&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* 最后一个子元素 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:nth-child(n)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* 第n个子元素 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* 鼠标悬停 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:active&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* 被激活(点击) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;关系形选择器&quot;&gt;&lt;a href=&quot;#关系形选择器&quot; class=&quot;headerlink&quot; title=&quot;关系形选择器&quot;&gt;&lt;/a&gt;关系形选择器&lt;/h2&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* 所有A元素和B元素 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* 元素A的任一后代元素E (后代节点指A的子节点，子节点的子节点，以此类推) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;A&lt;/span&gt; &amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/*元素A的任一子元素E(也就是直系后代)*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:first-child&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/*任一是其父母结点的第一个子节点的元素E*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;A&lt;/span&gt; + &lt;span class=&quot;selector-tag&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/*选择紧接在元素A之后的所有 兄弟元素E*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;A&lt;/span&gt; ~ &lt;span class=&quot;selector-tag&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/*同一个父元素下，并且前面有A元素的E*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://github.com/wz71014q/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://github.com/wz71014q/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>http的发展历史</title>
    <link href="https://github.com/wz71014q/2018/08/09/http%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2/"/>
    <id>https://github.com/wz71014q/2018/08/09/http发展历史/</id>
    <published>2018-08-09T11:08:00.000Z</published>
    <updated>2019-09-26T03:31:07.511Z</updated>
    
    <content type="html"><![CDATA[<h2 id="http的发展历史"><a href="#http的发展历史" class="headerlink" title="http的发展历史"></a>http的发展历史</h2><ol><li>http/0.9</li></ol><ul><li>只有一个get方法，服务器发送完数据就关闭TCP连接;</li><li>HTTP/0.9 的响应内容并不包含HTTP头，这意味着只有HTML件可以传送，无法传输其他类型的文件；</li><li>没有状态码或错误代码</li><li>请求方法：GET</li></ul><ol start="2"><li>http/1.0</li></ol><ul><li>状态码在响应开始时发送，使浏览器能够快速了解请求的状态并能做出一些调整</li><li>引入了HTTP请求头的概念。</li><li>在新HTTP头（Content-Type头）的帮助下，具备了传输非HTML文档的能力</li><li>增加了协议版本信息</li><li>1.0支持GET、POST、HEAD</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// e.g.</span></span><br><span class="line">GET /myPage.html HTTP/<span class="number">1.0</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; WOW64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">69.0</span><span class="number">.3497</span><span class="number">.100</span> Safari/<span class="number">537.36</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">200</span> OK</span><br><span class="line"><span class="built_in">Date</span>: Tue, <span class="number">15</span> Nov <span class="number">1994</span> <span class="number">08</span>:<span class="number">12</span>:<span class="number">31</span> GMT</span><br><span class="line">Server: CERN/<span class="number">3.0</span> libwww/<span class="number">2.17</span></span><br><span class="line">Content-Type: text/html</span><br><span class="line"><span class="comment">// 一个包含图片的页面</span></span><br><span class="line">&lt;HTML&gt;</span><br><span class="line">  &lt;IMG SRC=<span class="string">"/myimage.gif"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/HTML&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>http/1.1</li></ol><ul><li>第一个http标准化版本，可以使用Host请求头，使同一个IP可以配置多个域名</li><li>持久链接（keep-alive）</li><li>增加了pipeline，HTTP的请求队列是一个先进先出的队列。客户端的请求是一个接一个的，上一个请求没收到回应时就继续等待，收到回应后再发送下一个请求。这样服务器有大部分时间处于空闲状态。1.1版本的http协议将这个队列放在了服务器，客户端可以不断地发送请求，服务器将这些请求整理在一个队列中，一个一个进行处理。</li><li>可以同时打开多个TCP连接。</li></ul><ol start="4"><li>http/2.0</li></ol><ul><li>二进制分帧层</li><li>多路复用</li><li>首部压缩</li><li>服务器推送</li><li>GET、POST、HEAD、OPTIONS、PUT、DELETE、TRACE、CONNECT</li></ul><h2 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h2><ul><li>GET: 请求显示指定路径的资源，一般只用来数据的读取；</li><li>POST: 向指定资源提交数据，并请求服务器进行处理，例如表单的提交等；</li><li>HEAD: 与GET方法一样，但是只返回响应头信息，常用来测试服务器的性能；</li><li>PUT: 向服务器指定路径上传最新资源，是幂等的方法。通过该方法，客户端可以上传最新内容；</li><li>DELETE: 向服务器请求删除指定URI的资源，是幂等的；</li><li>CONNECT: 该方法是HTTP/1.1预留方法，能够连接改为管道方式的代理服务器，常用于SSL加密的加密服务器或者非加密HTTP代理服务器</li><li>OPTIONS: 该方法向服务器请求返回所有支持的HTTP请求方法，也用来测试服务器性能</li><li>TRACE: 该方法请求服务器返回请求的内容，用于HTTP的诊断或测试</li><li><p>PATCH: PATCH方法与PUT方法一样，用来更新服务器的资源。区别是:<br>1、PATCH方法只是部分更新，PUT方法是全部更新。<br>2、PATCH方法指定的服务器路径不存在时会创建一个，PUT不会</p></li><li><p>幂等：对同一个系统，使用同样的条件，一次请求和重复的多次请求对系统资源的影响是一致的。</p></li></ul><h2 id="http状态码"><a href="#http状态码" class="headerlink" title="http状态码"></a>http状态码</h2><ol><li>1xx 服务器收到请求，请求者需要继续操作<blockquote><p>100 继续请求<br>101 服务器根据客户端的要求，切换更高级的协议</p></blockquote></li><li>2xx 请求成功，服务器正在处理或成功处理<blockquote><p>200 请求成功<br>201 已创建，成功请求并创建了新的资源<br>202 已接受，但处理未完成<br>204 无内容，服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</p></blockquote></li><li>3xx 重定向，需要进一步操作，以完成请求<blockquote><p>300 请求的资源有多个地址，需要客户端自己选择<br>301 请求的资源已被永久移动到新地址，返回新地址，浏览器自动解析新的url<br>302 临时重定向<br>304 请求的内容未修改。客户端通常会缓存访问过的资源，通过一个头信息指出希望只返回指定日期之后修改的资源<br>头信息：Last-Modified: Wed, 18 Jun 2018 14:22:27 GMT<br>Cache-Control: max-age=600<br>Expires: Wed, 18 Jun 2018 14:48:39 GMT<br>Date: Wed, 18 Jun 2018 14:48:39 GMT<br>浏览器第一次请求某一个url时，服务端返回的状态是200，同时有个Last-Modified标记文件在服务端最后的修改时间，第二次请求时，浏览器会向服务器传送If-Modified-Since报头，询问是否更改过，如果没有更改就返回304</p></blockquote></li><li>4xx 客户端错误，请求包含语法错误或无法完成请求</li></ol><blockquote><p>400 客户端请求的语法错误，服务器无法解析<br>401 请求用户身份验证<br>403 服务器拒绝客户端的请求<br>404 请求资源路径错误，服务器无法找到该资源<br>405 客户端请求的方法被禁止<br>407 请求代理身份验证<br>408 服务器等待客户端时间过长，请求超时<br>410 服务器以前有这个资源，但是现在没有了<br>416 客户端请求的范围无效</p></blockquote><ol start="5"><li>5xx 服务器错误，服务器在处理请求的过程中发生了错误</li></ol><blockquote><p>500 服务器内部错误，无法完成请求<br>501 服务器不支持请求的功能<br>502 无效响应<br>503 Service Unavailable 由于服务器超载或者系统维护，服务器暂时无法响应请求<br>505 服务器不支持请求的协议版本，无法完成请求</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;http的发展历史&quot;&gt;&lt;a href=&quot;#http的发展历史&quot; class=&quot;headerlink&quot; title=&quot;http的发展历史&quot;&gt;&lt;/a&gt;http的发展历史&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;http/0.9&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;只有一个get
      
    
    </summary>
    
      <category term="JS" scheme="https://github.com/wz71014q/categories/JS/"/>
    
      <category term="http" scheme="https://github.com/wz71014q/categories/http/"/>
    
    
      <category term="JS" scheme="https://github.com/wz71014q/tags/JS/"/>
    
      <category term="http" scheme="https://github.com/wz71014q/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>three.js之曲线</title>
    <link href="https://github.com/wz71014q/2018/07/30/three%E4%B9%8B%E6%9B%B2%E7%BA%BF/"/>
    <id>https://github.com/wz71014q/2018/07/30/three之曲线/</id>
    <published>2018-07-30T12:34:00.000Z</published>
    <updated>2019-09-26T03:31:07.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="曲线"><a href="#曲线" class="headerlink" title="曲线"></a>曲线</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、 .arcLengthDivisions</span><br></pre></td></tr></table></figure><blockquote><p>当通过.getLengths计算曲线的累积段长度时，此值决定了分割的数量。为了确保在使用.getSpacedPoint等方法时的精度，如果曲线非常大，建议增加.arcLengthDivision属性。默认值为200。  </p></blockquote><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、.getPoint ( t : Float, <span class="attr">optionalTarget</span> : Vector ) : Vector  </span><br><span class="line"><span class="comment">// getPoint方法返回在curve对象上t点(取值范围0.0-1.0之间)的矢量.</span></span><br><span class="line">t: 来获取在任意百分比下的ｔ点的向量，百分比的值限于[<span class="number">0</span><span class="number">-1</span>]。<span class="number">0</span>是从路径的第一个点开始算起，<span class="number">1</span>是最后一点,t=<span class="number">0.6</span>表示从起点开始的<span class="number">60</span>%处的点的向量。  </span><br><span class="line">optionalTarget:　(可选)如果指定，结果将复制到此向量，否则将创建一个新的向量。  </span><br><span class="line"><span class="number">2</span>、.getPointAt ( u : Float, <span class="attr">optionalTarget</span> : Vector ) : Vector</span><br><span class="line"><span class="comment">// 根据弧长返回曲线上给定位置的矢量。  </span></span><br><span class="line">u: u的取值范围是<span class="number">0.0</span> - <span class="number">1.0</span>, 将曲线作为一个整体, 一段弧长占曲线总长度的百分比。  </span><br><span class="line"><span class="number">3</span>、.getPoints ( divisions : Integer ) : <span class="built_in">Array</span>  </span><br><span class="line"><span class="comment">// getPoints方法根据divisions将曲线等分,获得在曲线对象上等分点的点序列.如果没有设置参数divisions,默认初始化为5等分.返回对应等分线段顶点的坐标数组.数组长度为(divisions + 1)  </span></span><br><span class="line">divisions -- 将曲线分成的段数，默认是<span class="number">5</span>  </span><br><span class="line"><span class="number">4</span>、.getSpacedPoints ( divisions : Integer ) : <span class="built_in">Array</span>  </span><br><span class="line"><span class="comment">// getSpacedPoints方法根据divisions将曲线等分,获得在曲线对象上等分点的点序列.如果没有设置参数divisions,默认初始化为5等分.返回对应等分线段端点在曲线上的相对位置数组,用弧长表示.  </span></span><br><span class="line"><span class="comment">// 获得一系列顶点的相对位置的数组.调用getPointAt方法。</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>源码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">THREE.Curve.prototype.getSpacedPoints = <span class="function"><span class="keyword">function</span> (<span class="params"> divisions </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( ! divisions ) divisions = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">var</span> d, pts = [];</span><br><span class="line">  <span class="keyword">for</span> ( d = <span class="number">0</span>; d &lt;= divisions; d ++ ) &#123;</span><br><span class="line">    pts.push( <span class="keyword">this</span>.getPointAt(d / divisions ));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pts;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>5、.getLength () : Float<br>获取曲线的长度<br>6、.getLengths ( divisions : Integer ) : Array<br>将曲线分成divisions等份，从起点开始获取每个等分点距离起点的长度，数组长度为divisions + 1<br>e.g.: [0, 32.40468003621915, 64.70282683002952, 96.89129617675769, 129.189442970568, 161.59412300678719]<br>7、.updateArcLengths () : null<br>// 更新累积段距离缓存。调用getLengths方法,更新长度数组.<br>8、.getUtoTmapping ( u : Float, distance : Float ) : Float<br>// 输入u(0~1),将曲线作为一个整体,一段弧长占曲线总长度的百分比。返回这个点处的百分比<br>distance: 如果设置长度值, 则以该段长度为总长度，计算u占这段曲线的百分比，返回对应点的占比。<br>9、.getTangent ( t : Float ) : Vector<br>// getTangent方法将返回一个点t在曲线上位置向量的法线向量  </p><p>源码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">THREE.Curve.prototype.getTangent = <span class="function"><span class="keyword">function</span>(<span class="params"> t </span>) </span>&#123;</span><br><span class="line">  <span class="comment">//这里为了给向量设定一个方向.</span></span><br><span class="line">  <span class="keyword">var</span> delta = <span class="number">0.0001</span>; <span class="comment">// 设置一个delta值</span></span><br><span class="line">  <span class="keyword">var</span> t1 = t - delta; <span class="comment">// t点减delta值,</span></span><br><span class="line">  <span class="keyword">var</span> t2 = t + delta; <span class="comment">// t点加delta值.</span></span><br><span class="line">  <span class="comment">// tan(0)和tan(1)无法取值，所以采用近似值</span></span><br><span class="line">  <span class="keyword">if</span> ( t1 &lt; <span class="number">0</span> ) t1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( t2 &gt; <span class="number">1</span> ) t2 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> pt1 = <span class="keyword">this</span>.getPoint( t1 );</span><br><span class="line">  <span class="keyword">var</span> pt2 = <span class="keyword">this</span>.getPoint( t2 );</span><br><span class="line">  <span class="keyword">var</span> vec = pt2.clone().sub(pt1); <span class="comment">// pt2向量减去pt1向量</span></span><br><span class="line">  <span class="keyword">return</span> vec.normalize(); <span class="comment">// 单位化  </span></span><br><span class="line">  <span class="comment">//返回一个点t在曲线上位置向量的法线向量.  </span></span><br><span class="line"><span class="number">10</span>、.getTangentAt ( u : Float ) : Vector  </span><br><span class="line"><span class="number">11</span>、.computeFrenetFrames ( segments : Integer, <span class="attr">closed</span> : <span class="built_in">Boolean</span> ) : <span class="built_in">Object</span>  </span><br><span class="line">计算弗莱纳标架，实际就是管道每一段的计算的值，每一帧都是有三个参数组成，用于拉伸图形或者管道图形</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[computeFrenetFrames示例](http://www.jackpu.com/yi-shi-yong-three-js-zhi-zuo-chong-dong/)  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="number">12</span>、.toJSON () : <span class="built_in">Object</span>  </span><br><span class="line">返回一个曲线 <span class="built_in">JSON</span> 对象  </span><br><span class="line"><span class="number">13</span>、.fromJSON ( json : <span class="built_in">Object</span> ) : Curve  </span><br><span class="line">复制一个json格式的曲线，返回一个曲线</span><br></pre></td></tr></table></figure></p><h1 id="path"><a href="#path" class="headerlink" title="path"></a>path</h1><h2 id="构造器："><a href="#构造器：" class="headerlink" title="构造器："></a>构造器：</h2><blockquote><p>1、Path( points : Array )<br>points是二维点的数组，第一个点作为起点，然后将连续点作为线添加到曲线数组中。如果没有点，画了一个空路径，那么将原点作为currentPoint  </p></blockquote><h2 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h2><blockquote><p>1、currentPoint<br>当前路径的起点</p></blockquote><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span>、圆  </span><br><span class="line"> .absarc ( x : Float, <span class="attr">y</span> : Float, <span class="attr">radius</span> : Float, <span class="attr">startAngle</span> : Float, <span class="attr">endAngle</span> : Float, <span class="attr">clockwise</span> : Float )  </span><br><span class="line"> x, <span class="attr">y</span>: 圆心位置  </span><br><span class="line"> clockwise ：是否顺时针方向画圆，默认是<span class="literal">false</span>  </span><br><span class="line"></span><br><span class="line"> <span class="number">2</span>、椭圆：  </span><br><span class="line"> .absellipse ( x : Float, <span class="attr">y</span> : Float, <span class="attr">xRadius</span> : Float, <span class="attr">yRadius</span> : Float, <span class="attr">startAngle</span> : Float, <span class="attr">endAngle</span> : Float, <span class="attr">clockwise</span> : Float, <span class="attr">rotation</span> : Float )  </span><br><span class="line"></span><br><span class="line">rotation: 椭圆的旋转角，从x正轴方向逆时针旋转，默认是<span class="number">0</span>。如果现在有一段从x轴方向逆时针画<span class="number">30</span>度的圆弧，rotation设为<span class="number">2</span>/<span class="number">3</span>PI, 则该段弧是从x轴正方形逆时针<span class="number">60</span>度开始，画到逆时针<span class="number">90</span>度结束。  </span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、圆：  </span><br><span class="line">.arc ( x : Float, <span class="attr">y</span> : Float, <span class="attr">radius</span> : Float, <span class="attr">startAngle</span> : Float, <span class="attr">endAngle</span> : Float, <span class="attr">clockwise</span> : Float )</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、椭圆  </span><br><span class="line">.ellipse ( x : Float, <span class="attr">y</span> : Float, <span class="attr">xRadius</span> : Float, <span class="attr">yRadius</span> : Float, <span class="attr">startAngle</span> : Float, <span class="attr">endAngle</span> : Float, <span class="attr">clockwise</span> : Float, <span class="attr">rotation</span> : Float )  </span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、贝塞尔曲线  </span><br><span class="line">.bezierCurveTo ( cp1X : Float, <span class="attr">cp1Y</span> : Float, <span class="attr">cp2X</span> : Float, <span class="attr">cp2Y</span> : Float, <span class="attr">x</span> : Float, <span class="attr">y</span> : Float )  </span><br><span class="line">创建一段从currentPoint(如果没有设置就是原点)开始的贝塞尔曲线，以(cp1X, cp1Y)和(cp2X, cp2Y)作为控制点，(x, y)为终点。  </span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、原点位置  </span><br><span class="line">.moveTo(x, y)  </span><br><span class="line">将原点设置为(x, y)</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>、.lineTo(x, y)  </span><br><span class="line">从原点到(x, y)连一条线。</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>、.setFromPoints ( vector2s : <span class="built_in">Array</span> )</span><br><span class="line">points -- 二维点的数组。</span><br><span class="line">这个方法将二维点的数组以直线连接起来，形成折线。可以用在三维点数组  </span><br><span class="line"><span class="number">9</span>、.splineThru ( points : <span class="built_in">Array</span> )  </span><br><span class="line">这个方法将二维点的数组以曲线连接起来，形成一条平滑曲线。这个方法只能用于二维点数组</span><br><span class="line"><span class="number">10</span>、二次方曲线  </span><br><span class="line">.quadraticCurveTo ( cpX : Float, <span class="attr">cpY</span> : Float, <span class="attr">x</span> : Float, <span class="attr">y</span> : Float )  </span><br><span class="line">以(cpX, cpY)为控制点, 起点为currentPoint, 终点为(x, y)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;曲线&quot;&gt;&lt;a href=&quot;#曲线&quot; class=&quot;headerlink&quot; title=&quot;曲线&quot;&gt;&lt;/a&gt;曲线&lt;/h1&gt;&lt;h2 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属性&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;、 .arcLengthDivisions&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;当通过.getLengths计算曲线的累积段长度时，此值决定了分割的数量。为了确保在使用.getSpacedPoint等方法时的精度，如果曲线非常大，建议增加.arcLengthDivision属性。默认值为200。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;、.getPoint ( t : Float, &lt;span class=&quot;attr&quot;&gt;optionalTarget&lt;/span&gt; : Vector ) : Vector  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// getPoint方法返回在curve对象上t点(取值范围0.0-1.0之间)的矢量.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t: 来获取在任意百分比下的ｔ点的向量，百分比的值限于[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]。&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;是从路径的第一个点开始算起，&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;是最后一点,t=&lt;span class=&quot;number&quot;&gt;0.6&lt;/span&gt;表示从起点开始的&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;%处的点的向量。  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;optionalTarget:　(可选)如果指定，结果将复制到此向量，否则将创建一个新的向量。  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;、.getPointAt ( u : Float, &lt;span class=&quot;attr&quot;&gt;optionalTarget&lt;/span&gt; : Vector ) : Vector&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 根据弧长返回曲线上给定位置的矢量。  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;u: u的取值范围是&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;, 将曲线作为一个整体, 一段弧长占曲线总长度的百分比。  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;、.getPoints ( divisions : Integer ) : &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// getPoints方法根据divisions将曲线等分,获得在曲线对象上等分点的点序列.如果没有设置参数divisions,默认初始化为5等分.返回对应等分线段顶点的坐标数组.数组长度为(divisions + 1)  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;divisions -- 将曲线分成的段数，默认是&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;、.getSpacedPoints ( divisions : Integer ) : &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// getSpacedPoints方法根据divisions将曲线等分,获得在曲线对象上等分点的点序列.如果没有设置参数divisions,默认初始化为5等分.返回对应等分线段端点在曲线上的相对位置数组,用弧长表示.  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获得一系列顶点的相对位置的数组.调用getPointAt方法。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JS" scheme="https://github.com/wz71014q/categories/JS/"/>
    
      <category term="three.js" scheme="https://github.com/wz71014q/categories/three-js/"/>
    
    
      <category term="JS" scheme="https://github.com/wz71014q/tags/JS/"/>
    
      <category term="three.js" scheme="https://github.com/wz71014q/tags/three-js/"/>
    
  </entry>
  
  <entry>
    <title>three.js之入门学习</title>
    <link href="https://github.com/wz71014q/2018/07/30/three.js%E4%B9%8B%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>https://github.com/wz71014q/2018/07/30/three.js之入门学习/</id>
    <published>2018-07-30T12:34:00.000Z</published>
    <updated>2019-09-26T03:31:07.515Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="一、官方网站-https-threejs-org"><a href="#一、官方网站-https-threejs-org" class="headerlink" title="一、官方网站:https://threejs.org"></a><a href="https://threejs.org" title="https://threejs.org" target="_blank" rel="noopener">一、官方网站:https://threejs.org</a></h1><h1 id="二、关于Three-js"><a href="#二、关于Three-js" class="headerlink" title="二、关于Three.js"></a>二、关于Three.js</h1><blockquote><p>WebGL是大部分浏览器直接支持的一种3D绘图标准，它可以创建二维图形和应用，还可以充分利用GPU，创建漂亮的、高性能的三维应用。直接使用WebGL非常复杂，Three.js库提供了一套基于WebGL的、非常易用的JavaScrip API，它源自github的一个<strong><a href="https://github.com/mrdoob/three.js" title="https://github.com/mrdoob/three.js">开源项目</a></strong>，通过这些API可以直接在浏览器中创建三维场景。本文整理了一些入门资料。</p></blockquote><h1 id="三、开始"><a href="#三、开始" class="headerlink" title="三、开始"></a>三、开始</h1><ul><li>引入<br>可以直接在HTML引入<a href="https://raw.githubusercontent.com/mrdoob/three.js/dev/build/three.js" title="https://raw.githubusercontent.com/mrdoob/three.js/dev/build/three.js" target="_blank" rel="noopener">Three.js</a>：  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"three.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><p>也可以用npm安装：<br><code>npm i three</code><br><code>import * as THREE from &#39;three&#39;</code>  </p><ul><li>使用<br>three渲染一个3D场景需要以下<strong>必要元素</strong>:<br>1.场景(Scene)：是物体、光源等元素的容器，要渲染的东西需要先添加进场景；<br>2.相机（Camera）：控制视角的位置、范围以及视觉焦点的位置,一个3D环境中只能存在一个相机；<br>3.光源（Light）：包括全局光、平行光、点光源；<br>4.物体对象（Mesh）：包括二维物体（点、线、面）、三维物体、粒子等；<br>5.渲染器（Renderer）：指定渲染方式，如webGL\canvas2D\Css2D\Css3D等；<br><strong>非必要元素</strong>：<br>控制器(Control)：相机控件，可通过键盘、鼠标控制相机的移动。<h1 id="四、实例"><a href="#四、实例" class="headerlink" title="四、实例"></a>四、实例</h1></li></ul><a id="more"></a><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> width = <span class="built_in">window</span>.innerWidth;  </span><br><span class="line"><span class="keyword">const</span> height = <span class="built_in">window</span>.innerHeight;   </span><br><span class="line"><span class="keyword">var</span> renderer;  </span><br><span class="line"><span class="keyword">var</span> camera;  </span><br><span class="line"><span class="keyword">var</span> light;  </span><br><span class="line"><span class="keyword">var</span> scene;   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initRender</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化渲染器</span></span><br><span class="line">  renderer = <span class="keyword">new</span> THREE.WebGLRenderer(&#123;</span><br><span class="line">    antialias: <span class="literal">true</span><span class="comment">// 抗锯齿</span></span><br><span class="line">  &#125;);</span><br><span class="line">  renderer.setSize(width, height);  <span class="comment">// 设置大小</span></span><br><span class="line">  renderer.setClearColor(<span class="number">0xffffff</span>, <span class="number">1.0</span>);  <span class="comment">// 设置背景色</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(renderer.domElement);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initScene</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line"><span class="comment">// 初始化场景</span></span><br><span class="line">  scene = <span class="keyword">new</span> THREE.Scene();  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initCamera</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="comment">// 初始化相机</span></span><br><span class="line">  camera = <span class="keyword">new</span> THREE.PerspectiveCamera(<span class="number">45</span>, width / height, <span class="number">10</span>, <span class="number">10000</span>);  <span class="comment">// 添加透视相机</span></span><br><span class="line">  camera.position.set(<span class="number">500</span>, <span class="number">500</span>, <span class="number">500</span>); <span class="comment">// 设置相机位置  </span></span><br><span class="line">  camera.up.set(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);  <span class="comment">// 相机以哪个轴为上方</span></span><br><span class="line">  camera.lookAt(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);  <span class="comment">// 相机焦点设置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initLight</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="comment">// 初始化灯光</span></span><br><span class="line">  light = <span class="keyword">new</span> THREE.DirectionalLight(&#123; <span class="attr">color</span>: <span class="number">0xffffff</span> &#125;);  <span class="comment">// 添加平行光</span></span><br><span class="line">  light.position.set(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 光的方向(x,y,z) </span></span><br><span class="line">  scene.add(light);  </span><br><span class="line">  <span class="keyword">let</span> pointLight = <span class="keyword">new</span> THREE.PointLight(<span class="number">0xffffff</span>);  <span class="comment">// 添加点光源  </span></span><br><span class="line">  pointLight.position.set(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>);  <span class="comment">// 点光源的位置</span></span><br><span class="line">  scene.add(pointLight);  </span><br><span class="line">  <span class="keyword">let</span> pointHelper = <span class="keyword">new</span> THREE.PointLightHelper(pointLight, <span class="number">5</span>, <span class="number">0xff0000</span>);  <span class="comment">// 设置点光源辅助工具,可以看到点光源的位置  </span></span><br><span class="line">  scene.add(pointHelper);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initObject</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="comment">// 初始化物体</span></span><br><span class="line">  <span class="keyword">let</span> geometry = <span class="keyword">new</span> THREE.CylinderGeometry(<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">100</span>, <span class="number">100</span>); <span class="comment">// 添加一个圆柱体</span></span><br><span class="line">  <span class="keyword">let</span> material = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;</span><br><span class="line">  color: <span class="number">0xffff00</span></span><br><span class="line">  &#125;); <span class="comment">// 添加材料</span></span><br><span class="line">  <span class="comment">// material.wireframe=true; // 圆柱体是否以网格显示</span></span><br><span class="line">  mesh = <span class="keyword">new</span> THREE.Mesh(geometry, material);</span><br><span class="line">  mesh.position.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  scene.add(mesh);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initAxes</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 添加辅助坐标轴</span></span><br><span class="line">  <span class="keyword">let</span> axes = <span class="keyword">new</span> THREE.AxesHelper(<span class="number">1000</span>);<span class="comment">// 蓝色为Z轴，绿色为Y轴，红色为X轴</span></span><br><span class="line">  scene.add(axes);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">threeStart</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  initRender();  </span><br><span class="line">  initScene();  </span><br><span class="line">  initCamera();  </span><br><span class="line">  initLight();  </span><br><span class="line">  initAxes();  </span><br><span class="line">  initObject();  </span><br><span class="line">  renderer.clear();</span><br><span class="line">  renderer.render(scene, camera);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">  threeStart();  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://raw.githubusercontent.com/wz71014q/img/master/three/circle.png" alt></p><h1 id="五、概念"><a href="#五、概念" class="headerlink" title="五、概念"></a>五、概念</h1><h2 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h2><p>three.js中采用的是右手坐标系，坐标轴方向主要是<code>camera.up.set(x, y, z);</code>设置。也就是说在相机眼里（其实就是我们看的角度）哪个轴向上。理解坐标系很重要，详情请看<a href="https://www.cnblogs.com/heyach/p/6902948.html" title="http://www.cnblogs.com/heyach/p/6902948.html" target="_blank" rel="noopener">three右手坐标系讲解</a>。</p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a><a href="https://threejs.org/docs/index.html#api/scenes/Scene" title="https://threejs.org/docs/index.html#api/scenes/Scene" target="_blank" rel="noopener">场景</a></h2><p>物体、光源、控制器的添加必须使用secen.add(object)添加到场景中才能渲染出来。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scene;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initScene</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  scene=<span class="keyword">new</span> THREE.Scene();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="相机"><a href="#相机" class="headerlink" title="相机"></a><a href="https://threejs.org/docs/index.html#api/cameras/Camera" title="https://threejs.org/docs/index.html#api/cameras/Camera" target="_blank" rel="noopener">相机</a></h2><p><a href="https://threejs.org/docs/index.html#api/cameras/OrthographicCamera" title="https://threejs.org/docs/index.html#api/cameras/OrthographicCamera" target="_blank" rel="noopener">正交投影相机</a>：<br><code>THREE.OrthographicCamera(left, right, top, bottom, near, far) // 大小不因远近而变化</code><br><a href="https://threejs.org/docs/index.html#api/cameras/PerspectiveCamera" title="https://threejs.org/docs/index.html#api/cameras/PerspectiveCamera" target="_blank" rel="noopener">透视投影相机</a>：<br><code>THREE.PerspectiveCamera(fov, aspect, near, far) // 遵循近大远小的空间规则</code></p><p>一般情况下，我们使用的是透视投影相机，其参数为：</p><pre><code>fov：垂直方向夹角(视角)aspect：可视区域长宽比 width/heightnear：渲染区域离摄像机最近的距离far：渲染区域离摄像机最远的距离，仅在距离摄像机near和far间的区域会被渲染到canvas中</code></pre><p>相机的位置设置：<br><code>camera.position.set(x,y,z)或camera.position = new THREE.Vector3(x, y, z);</code><br>控制相机的焦点位置，决定相机的朝向<br><code>camera.lookAt(0, 0, 0);</code><br>添加<a href="https://threejs.org/docs/index.html#api/helpers/CameraHelper" title="https://threejs.org/docs/index.html#api/helpers/CameraHelper" target="_blank" rel="noopener">相机辅助工具</a>来查看相机的位置</p><h2 id="灯光"><a href="#灯光" class="headerlink" title="灯光"></a><a href="https://threejs.org/docs/index.html#api/lights/Light" title="https://threejs.org/docs/index.html#api/lights/Light" target="_blank" rel="noopener">灯光</a></h2><p><a href="https://threejs.org/docs/index.html#api/lights/AmbientLight" title="https://threejs.org/docs/index.html#api/lights/AmbientLight" target="_blank" rel="noopener">全局光</a>：THREE.AmbientLight，影响整个scene的光源，一般是为了弱化阴影或调整整体色调，可设置光照颜色，以颜色的明度确定光源亮度；<br><a href="https://threejs.org/docs/index.html#api/lights/DirectionalLight" title="https://threejs.org/docs/index.html#api/lights/DirectionalLight" target="_blank" rel="noopener">平行光</a>：THREE.DirectionalLight，模拟类似太阳的光源，所有被照射的区域亮度是一致的，可设置光照颜色、光照方向（通过向量确定方向），以颜色的明度确定光源亮度；<br><a href="https://threejs.org/docs/index.html#api/lights/PointLight" title="https://threejs.org/docs/index.html#api/lights/PointLight" target="_blank" rel="noopener">点光源</a>：THREE.PointLight，单点发光，照射所有方向，可设置光照强度，光照半径和光颜色；<br><a href="https://threejs.org/docs/index.html#api/lights/shadows/SpotLightShadow" title="https://threejs.org/docs/index.html#api/lights/shadows/SpotLightShadow" target="_blank" rel="noopener">聚光灯</a>：THREE.SpotLight，这种光源有聚光的效果，类似于台灯，吊灯，手电筒。<br>最简单的用法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initLight</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  light = <span class="keyword">new</span> THREE.DirectionalLight(&#123; <span class="attr">color</span>: <span class="number">0xffffff</span> &#125;); <span class="comment">// 创建白色平行光  </span></span><br><span class="line">  light.position.set(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 平行光只需设置方向向量，其他光源需要设置具体位置</span></span><br><span class="line">  scene.add(light);  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>光影关系可以显著影响显示效果。参考资料：<a href="https://www.cnblogs.com/amy2011/p/5761174.html" title="https://www.cnblogs.com/amy2011/p/5761174.html" target="_blank" rel="noopener">https://www.cnblogs.com/amy2011/p/5761174.html</a></p><h2 id="3D模型"><a href="#3D模型" class="headerlink" title="3D模型"></a>3D模型</h2><p>我们可以用three自由地创建一些<a href="https://threejs.org/docs/index.html#api/objects/Points" title="https://threejs.org/docs/index.html#api/objects/Points" target="_blank" rel="noopener">点</a>、<a href="https://threejs.org/docs/index.html#api/objects/Line" title="https://threejs.org/docs/index.html#api/objects/Line" target="_blank" rel="noopener">线</a>、<a href="https://threejs.org/docs/index.html#api/math/Plane" title="https://threejs.org/docs/index.html#api/math/Plane" target="_blank" rel="noopener">面</a>和<a href="https://threejs.org/docs/index.html#api/core/Geometry" title="https://threejs.org/docs/index.html#api/core/Geometry" target="_blank" rel="noopener">几何体</a>。或者加载一些已经做好的3D模型，three更新的很快，目前支持大部分格式的3D模型，以后会越来越多。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 添加一个圆柱体</span></span><br><span class="line">  <span class="keyword">let</span> geometry = <span class="keyword">new</span> THREE.CylinderGeometry(<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">  <span class="keyword">let</span> material = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123; <span class="attr">color</span>: <span class="number">0xffff00</span> &#125;);</span><br><span class="line">  mesh = <span class="keyword">new</span> THREE.Mesh(geometry, material);</span><br><span class="line">  mesh.position = <span class="keyword">new</span> THREE.Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  scene.add(mesh);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://threejs.org/docs/index.html#api/geometries/CylinderGeometry" title="https://threejs.org/docs/index.html#api/geometries/CylinderGeometry" target="_blank" rel="noopener">CylinderGeometry</a>是柱体，控制底面边的数量可以得到近似的圆柱体，还可以创建<a href="https://threejs.org/docs/index.html#api/geometries/BoxGeometry" title="https://threejs.org/docs/index.html#api/geometries/BoxGeometry" target="_blank" rel="noopener">正方体</a>、<a href="https://threejs.org/docs/index.html#api/geometries/OctahedronGeometry" title="https://threejs.org/docs/index.html#api/geometries/OctahedronGeometry" target="_blank" rel="noopener">球</a>、<a href="https://threejs.org/docs/index.html#api/geometries/RingGeometry" title="https://threejs.org/docs/index.html#api/geometries/RingGeometry" target="_blank" rel="noopener">环</a>、<a href="https://threejs.org/docs/index.html#api/geometries/TextGeometry" title="https://threejs.org/docs/index.html#api/geometries/TextGeometry" target="_blank" rel="noopener">文字</a>等已经设定好的几何体。如果库里没有需要的，可以自己创建自定义几何体。</p><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initCar</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="comment">// 加载一个外部.obj模型</span></span><br><span class="line">  <span class="keyword">let</span> mtlLoader = <span class="keyword">new</span> THREE.MTLLoader();  </span><br><span class="line">  mtlLoader.load(<span class="string">'../../../3Dmodel/Lamborghini/Avent.mtl'</span>, (materials) =&gt; &#123;  </span><br><span class="line">    <span class="comment">// 加载材料</span></span><br><span class="line">       materials.preload();  </span><br><span class="line">       <span class="keyword">let</span> objLoader = <span class="keyword">new</span> THREE.OBJLoader();  </span><br><span class="line">       objLoader.setMaterials(materials);  </span><br><span class="line">       objLoader.load(<span class="string">'../../../3Dmodel/Lamborghini/Avent.obj'</span>, (object) =&gt; &#123;<span class="comment">// 加载模型  </span></span><br><span class="line">           object.scale.set(<span class="number">80</span>, <span class="number">80</span>, <span class="number">80</span>); <span class="comment">// 放大倍数  </span></span><br><span class="line">           scene.add(object);  </span><br><span class="line">         &#125;, (suc) =&gt; &#123; <span class="built_in">console</span>.log(<span class="function">(<span class="params">(suc.loaded <span class="regexp">/ suc.total) * 100) + '% OBJloaded'); &#125;, (err) =&gt; &#123; console.log(err); &#125;  </span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    );  </span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">  &#125;, (suc) =&gt; &#123; console.log(((suc.loaded /</span> suc.total</span>) * 100) + '% <span class="params">MTLloaded</span>'); &#125;, (<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(err); &#125;);  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wz71014q/img/master/three/airplane.png" alt><br>three.js加载外部文件需要用<a href="https://github.com/mrdoob/three.js/tree/dev/examples/js/loaders" title="https://github.com/mrdoob/three.js/tree/dev/examples/js/loaders">“loader系列”方法</a>，通过这些方法可以加载.obj、.json、.dae等格式的模型(<a href="https://www.zhihu.com/question/50005990" title="https://www.zhihu.com/question/50005990" target="_blank" rel="noopener">点击查看不同格式的模型之间的差异及优劣</a>）。<br><img src="https://raw.githubusercontent.com/wz71014q/img/master/three/plan.png" alt><br>像这种将一张图片当作一个平面的，要用<a href="https://threejs.org/docs/index.html#api/textures/Texture" title="https://threejs.org/docs/index.html#api/textures/Texture" target="_blank" rel="noopener">Texture</a>加载<a href="https://threejs.org/docs/index.html#api/constants/Materials" title="https://threejs.org/docs/index.html#api/constants/Materials" target="_blank" rel="noopener">材质（纹理）</a>。<a href="https://www.cnblogs.com/amy2011/p/6148736.html" title="https://www.cnblogs.com/amy2011/p/6148736.html" target="_blank" rel="noopener">参考资料</a></p><h1 id="六、简单动画"><a href="#六、简单动画" class="headerlink" title="六、简单动画"></a>六、简单动画</h1><ul><li><p>动画<br>动画有两种方式，一种是让图像动，另一种是让相机动。<br>一个简单的<a href="https://www.cnblogs.com/silent-stranger/p/6027266.html" title="https://www.cnblogs.com/silent-stranger/p/6027266.html" target="_blank" rel="noopener">旋转</a>：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> v1 = <span class="keyword">new</span> THREE.Vector3( <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> );</span><br><span class="line">     meshAll.rotateOnAxis(v1,<span class="number">0.01</span>);</span><br><span class="line">     mesh.rotation.z -= <span class="number">0.01</span>;</span><br><span class="line">     requestAnimationFrame(animate);</span><br><span class="line">     renderer.render(scene,camera);</span><br><span class="line">     stats.update();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>性能检测<br>为了监控帧率，引用<a href="https://github.com/mrdoob/stats.js/" title="https://github.com/mrdoob/stats.js/">Stats</a>插件来监控动画的帧率<br><img src="https://raw.githubusercontent.com/wz71014q/img/master/three/stats.png" alt>  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"Stats.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">……</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initStats</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  stats = <span class="keyword">new</span> Stats();  </span><br><span class="line">  stats.domElement.style.position = <span class="string">'absolute'</span>;  </span><br><span class="line">  stats.domElement.style.top = <span class="string">'0px'</span>;  </span><br><span class="line">  stats.domElement.style.left = <span class="string">'0px'</span>;  </span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(stats.domElement);  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="七、交互控制"><a href="#七、交互控制" class="headerlink" title="七、交互控制"></a>七、交互控制</h1><ul><li><a href="https://workshop.chromeexperiments.com/examples/gui/#1--Basic-Usage" title="https://workshop.chromeexperiments.com/examples/gui/#1--Basic-Usage" target="_blank" rel="noopener">dat.gui</a><br><img src="https://raw.githubusercontent.com/wz71014q/img/master/three/GUI.png" alt><br>资料：<a href="https://www.cnblogs.com/xiaoniuzai/p/6685556.html" title="https://www.cnblogs.com/xiaoniuzai/p/6685556.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaoniuzai/p/6685556.html</a></li><li><a href="https://github.com/mrdoob/three.js/tree/dev/examples/js/controls" title="https://github.com/mrdoob/three.js/tree/dev/examples/js/controls">其它插件</a><br>three自己也提供了很多插件来控制，例如<a href="https://threejs.org/docs/index.html#examples/controls/OrbitControls" title="https://threejs.org/docs/index.html#examples/controls/OrbitControls" target="_blank" rel="noopener">OrbitControls</a>，详情请看官网！<br><img src="https://raw.githubusercontent.com/wz71014q/img/master/three/circle.gif" alt>  <pre><code class="js">    <span class="function"><span class="keyword">function</span> <span class="title">initControl</span>(<span class="params"></span>) </span>{      controls = <span class="keyword">new</span> THREE.OrbitControls(camera);      <span class="comment">// controls.enabled = false;// boolean,禁用控制器</span>      <span class="comment">// controls.enableKeys = false; // boolean,禁用键盘</span>      <span class="comment">// controls.autoRotate = true; // boolean,是否自动旋转,所有的旋转都是绕着场景中心旋转，不是原点</span>      <span class="comment">// controls.autoRotateSpeed = 2; // Number,自动旋转速度</span>      controls.enableDamping = <span class="literal">true</span>; <span class="comment">// boolean, 开启后有缓冲效果，具有物理的阻力感</span>      controls.dampingFactor = <span class="number">0.3</span>; <span class="comment">// Float, 阻尼系数(0~1)，数值越低，阻力越小</span>      <span class="comment">// controls.enablePan = false; // boolean,禁止平移</span>      <span class="comment">// controls..panSpeed = 0.5; // 平移速度</span>      <span class="comment">// controls.enableRotate = false; // boolean,禁止旋转</span>      <span class="comment">// controls.enableZoom = false; // boolean,禁止远近拉伸</span>      <span class="comment">// controls.zoomSpeed = 0.1;// 鼠标滚动一个单位时拉伸幅度</span>      <span class="comment">// controls.rotateSpeed = 0.5;// 旋转速度</span>      <span class="comment">// controls.keyPanSpeed = 0.5; // Float, 用键盘平移的速度</span>      <span class="comment">// controls.keys = {</span>      <span class="comment">//   LEFT: 65,</span>      <span class="comment">//   RIGHT: 68,</span>      <span class="comment">//   UP: 87,</span>      <span class="comment">//   BOTTOM: 83</span>      <span class="comment">// }; // 键盘编码</span>      <span class="comment">// controls.minAzimuthAngle = 0 * Math.PI; // 水平方向最小角度</span>      <span class="comment">// controls.maxAzimuthAngle = 0.5 * Math.PI; // 水平方向最大角度，当Z轴向上时，从Z轴正方向往下看，逆时针90度</span>      <span class="comment">// controls.minDistance = 500; // 相机离物体最近距离</span>      <span class="comment">// controls.maxDistance = 600; // 相机离物体最远距离</span>      <span class="comment">// controls.minPolarAngle = 0 * Math.PI;// 上下两极的可视区域最小角度</span>      <span class="comment">// controls.maxPolarAngle = 0.5 * Math.PI;// 上下两极的可视区域最大角度，Z轴向上，从屏幕正上方往下90度</span>      <span class="comment">// controls.mouseButtons = {</span>      <span class="comment">//   ORBIT: THREE.MOUSE.LEFT,</span>      <span class="comment">//   ZOOM: THREE.MOUSE.MIDDLE,</span>      <span class="comment">//   PAN: THREE.MOUSE.RIGHT</span>      <span class="comment">// }; // 鼠标键位设置</span>      <span class="comment">// controls.screenSpacePanning = false; // boolean,false时只能在不是向上轴的方向移动。比如相机Z轴向上，那么物体只能在XY平面内移动</span>      <span class="comment">// controls.target = new THREE.Vector3(300, 200, 0); // 相机聚焦坐标</span>}</code></pre><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1>一个练习demo：<a href="https://www.jianshu.com/p/92771817c73f" title="https://www.jianshu.com/p/92771817c73f" target="_blank" rel="noopener">一个采用 Three.js 的 3D 动画场景制作：飞行者</a><br>这些只是入门资料整理，如果想做出官网展示的那些demo，还要自己下功夫钻研！让我们一起快乐地学习吧！</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;一、官方网站-https-threejs-org&quot;&gt;&lt;a href=&quot;#一、官方网站-https-threejs-org&quot; class=&quot;headerlink&quot; title=&quot;一、官方网站:https://threejs.org&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://threejs.org&quot; title=&quot;https://threejs.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;一、官方网站:https://threejs.org&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;二、关于Three-js&quot;&gt;&lt;a href=&quot;#二、关于Three-js&quot; class=&quot;headerlink&quot; title=&quot;二、关于Three.js&quot;&gt;&lt;/a&gt;二、关于Three.js&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;WebGL是大部分浏览器直接支持的一种3D绘图标准，它可以创建二维图形和应用，还可以充分利用GPU，创建漂亮的、高性能的三维应用。直接使用WebGL非常复杂，Three.js库提供了一套基于WebGL的、非常易用的JavaScrip API，它源自github的一个&lt;strong&gt;&lt;a href=&quot;https://github.com/mrdoob/three.js&quot; title=&quot;https://github.com/mrdoob/three.js&quot;&gt;开源项目&lt;/a&gt;&lt;/strong&gt;，通过这些API可以直接在浏览器中创建三维场景。本文整理了一些入门资料。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;三、开始&quot;&gt;&lt;a href=&quot;#三、开始&quot; class=&quot;headerlink&quot; title=&quot;三、开始&quot;&gt;&lt;/a&gt;三、开始&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;引入&lt;br&gt;可以直接在HTML引入&lt;a href=&quot;https://raw.githubusercontent.com/mrdoob/three.js/dev/build/three.js&quot; title=&quot;https://raw.githubusercontent.com/mrdoob/three.js/dev/build/three.js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Three.js&lt;/a&gt;：  &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;three.js&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也可以用npm安装：&lt;br&gt;&lt;code&gt;npm i three&lt;/code&gt;&lt;br&gt;&lt;code&gt;import * as THREE from &amp;#39;three&amp;#39;&lt;/code&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;br&gt;three渲染一个3D场景需要以下&lt;strong&gt;必要元素&lt;/strong&gt;:&lt;br&gt;1.场景(Scene)：是物体、光源等元素的容器，要渲染的东西需要先添加进场景；&lt;br&gt;2.相机（Camera）：控制视角的位置、范围以及视觉焦点的位置,一个3D环境中只能存在一个相机；&lt;br&gt;3.光源（Light）：包括全局光、平行光、点光源；&lt;br&gt;4.物体对象（Mesh）：包括二维物体（点、线、面）、三维物体、粒子等；&lt;br&gt;5.渲染器（Renderer）：指定渲染方式，如webGL\canvas2D\Css2D\Css3D等；&lt;br&gt;&lt;strong&gt;非必要元素&lt;/strong&gt;：&lt;br&gt;控制器(Control)：相机控件，可通过键盘、鼠标控制相机的移动。&lt;h1 id=&quot;四、实例&quot;&gt;&lt;a href=&quot;#四、实例&quot; class=&quot;headerlink&quot; title=&quot;四、实例&quot;&gt;&lt;/a&gt;四、实例&lt;/h1&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JS" scheme="https://github.com/wz71014q/categories/JS/"/>
    
      <category term="three.js" scheme="https://github.com/wz71014q/categories/three-js/"/>
    
    
      <category term="JS" scheme="https://github.com/wz71014q/tags/JS/"/>
    
      <category term="three.js" scheme="https://github.com/wz71014q/tags/three-js/"/>
    
  </entry>
  
</feed>
